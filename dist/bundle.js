(()=>{"use strict";var t={904:function(t,e){var r,n=this&&this.__extends||(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.AssertLessOrEqualThanError=e.AssertLessThanError=e.AssertGreaterOrEqualThanError=e.AssertGreaterThanError=e.AssertIntegerError=e.AssertError=e.assertLessOrEqualThan=e.assertLessThan=e.assertGreaterOrEqualThan=e.assertGreaterThan=e.assertInteger=void 0,e.assertInteger=function(t){if(!Number.isInteger(t))throw new o},e.assertGreaterThan=function(t,e){if(t<=e)throw new a},e.assertGreaterOrEqualThan=function(t,e){if(t<e)throw new s},e.assertLessThan=function(t,e){if(t>=e)throw new l},e.assertLessOrEqualThan=function(t,e){if(t>e)throw new u};var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(Error);e.AssertError=i;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(i);e.AssertIntegerError=o;var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(i);e.AssertGreaterThanError=a;var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(i);e.AssertGreaterOrEqualThanError=s;var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(i);e.AssertLessThanError=l;var u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(i);e.AssertLessOrEqualThanError=u},469:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(904),i=r(629),o=function(){function t(t,e,r){this.red=t,this.green=e,this.blue=r,(0,n.assertGreaterOrEqualThan)(t,0),(0,n.assertGreaterOrEqualThan)(e,0),(0,n.assertGreaterOrEqualThan)(r,0),(0,n.assertLessOrEqualThan)(t,255),(0,n.assertLessOrEqualThan)(e,255),(0,n.assertLessOrEqualThan)(r,255)}return t.prototype.getRed=function(){return this.red},t.prototype.getGreen=function(){return this.green},t.prototype.getBlue=function(){return this.blue},t.prototype.toHexFormat=function(){return this.hex?this.hex:this.hex="#"+this.red.toString(16)+this.green.toString(16)+this.blue.toString(16)},t.random=function(){return new t((0,i.randomInt)(0,255),(0,i.randomInt)(0,255),(0,i.randomInt)(0,255))},t}();e.default=o},629:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.randomInt=void 0,e.randomInt=function(t,e){var r=e-t+1;return Math.floor(Math.random()*r)+t}},386:function(t,e){var r=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},n=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,r,n){this.grid=t,this.x=e,this.y=r,this.factory=n}return t.prototype.moveByOffest=function(t,e){var i,o=this.getCoordinatesbyOffset(t,e),a=this.grid.getCell(this.x,this.y);(i=this.grid).getCell.apply(i,n([],r(o),!1)).isEmpty()&&(this.grid.delete(this.x,this.y),this.grid.insert(o[0],o[1],a))},t.prototype.deleteByOffset=function(t,e){var i;(i=this.grid).delete.apply(i,n([],r(this.getCoordinatesbyOffset(t,e)),!1))},t.prototype.getByOffest=function(t,e){var i;return(i=this.grid).getCell.apply(i,n([],r(this.getCoordinatesbyOffset(t,e)),!1))},t.prototype.replace=function(t){this.grid.insert(this.x,this.y,t(this.factory))},t.prototype.getCoordinatesbyOffset=function(t,e){for(var r=this.grid.getSize(),n=this.x+t,i=this.y+e;n<0;)n+=r.getWidth();for(;i<0;)i+=r.getHeight();return[n%r.getWidth(),i%r.getHeight()]},t}();e.default=i},18:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=r(425),i=r(874),o=r(815),a=r(906),s=r(997),l=function(){function t(){}return t.prototype.createWall=function(){return this.wall?this.wall:this.wall=new s.WallCell},t.prototype.createEmpty=function(){return this.empty?this.empty:this.empty=new n.EmptyCell},t.prototype.createOrganism=function(t,e,r){return void 0===r&&(r=void 0),new o.OrganismCell(t,e,r)},t.prototype.createPlant=function(){return this.plant?this.plant:this.plant=new a.PlantCell},t.prototype.createMeat=function(){return this.meat?this.meat:this.meat=new i.MeatCell},t}();e.default=l},467:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.prototype.visitEmpty=function(t){},t.prototype.visitWall=function(t){},t.prototype.visitOrganism=function(t){},t.prototype.visitPlant=function(t){},t.prototype.visitMeat=function(t){},t}();e.default=r},211:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Cell=void 0;var r=function(){function t(){}return t.prototype.update=function(t){},t.prototype.isStatic=function(){return!0},t.prototype.isEmpty=function(){return!1},t}();e.Cell=r},675:(t,e)=>{var r;Object.defineProperty(e,"__esModule",{value:!0}),e.Direction=void 0,(r=e.Direction||(e.Direction={}))[r.NORTH=0]="NORTH",r[r.NORTH_EAST=1]="NORTH_EAST",r[r.NORTH_WEST=2]="NORTH_WEST",r[r.SOUTH=3]="SOUTH",r[r.SOUTH_EAST=4]="SOUTH_EAST",r[r.SOUTH_WEST=5]="SOUTH_WEST",r[r.EAST=6]="EAST",r[r.WEST=7]="WEST",function(t){t.getOffset=function(e){switch(e){case t.NORTH:return[0,-1];case t.NORTH_EAST:return[1,-1];case t.NORTH_WEST:return[-1,-1];case t.SOUTH:return[0,1];case t.SOUTH_EAST:return[1,1];case t.SOUTH_WEST:return[-1,1];case t.EAST:return[1,0];case t.WEST:return[-1,0]}},t.random=function(){var e=Object.keys(t).map((function(t){return Number.parseInt(t)})).filter((function(t){return!Number.isNaN(t)}));return e[Math.floor(Math.random()*e.length)]},t.rotateLeft=function(e){switch(e){case t.NORTH:return t.NORTH_WEST;case t.NORTH_EAST:return t.NORTH;case t.NORTH_WEST:return t.WEST;case t.SOUTH:return t.SOUTH_EAST;case t.SOUTH_EAST:return t.EAST;case t.SOUTH_WEST:return t.SOUTH;case t.EAST:return t.NORTH_EAST;case t.WEST:return t.SOUTH_WEST}},t.rotateRight=function(e){switch(e){case t.NORTH:return t.NORTH_EAST;case t.NORTH_EAST:return t.EAST;case t.NORTH_WEST:return t.NORTH;case t.SOUTH:return t.SOUTH_WEST;case t.SOUTH_EAST:return t.SOUTH;case t.SOUTH_WEST:return t.WEST;case t.EAST:return t.SOUTH_EAST;case t.WEST:return t.NORTH_WEST}}}(e.Direction||(e.Direction={}))},425:function(t,e,r){var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.EmptyCell=void 0;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visit=function(t){t.visitEmpty(this)},e.prototype.isEmpty=function(){return!0},e}(r(211).Cell);e.EmptyCell=o},188:function(t,e,r){var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i=r(386),o=r(704),a=function(){function t(t,e){this.cellFactory=e,this.step=0,this.grid=new o.default(t,e)}return t.prototype.generatePlants=function(){var t,e;if(0!==this.grid.countEmpty()){var r=this.grid.countEmpty()/this.grid.getSize().getCellCount()/100;try{for(var i=n(this.grid),o=i.next();!o.done;o=i.next()){var a=o.value,s=a.x,l=a.y;a.cell.isEmpty()&&Math.random()<r&&this.grid.insert(s,l,this.cellFactory.createPlant())}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}}},t.prototype.update=function(){var t,e;this.generatePlants();try{for(var r=n(this.grid),o=r.next();!o.done;o=r.next()){var a=o.value,s=a.x,l=a.y,u=a.cell;u.isStatic()||u.update(new i.default(this.grid,s,l,this.cellFactory))}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}this.step++},t.prototype.getGrid=function(){return this.grid},t.prototype.getStep=function(){return this.step},t}();e.default=a},816:function(t,e,r){var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i,o=r(829);!function(t){t[t.EMPTY=0]="EMPTY",t[t.WALL=1]="WALL",t[t.PLANT=2]="PLANT",t[t.MEAT=3]="MEAT",t[t.ORGANISM_SIMILAR=4]="ORGANISM_SIMILAR",t[t.ORGANISM_OTHER=5]="ORGANISM_OTHER"}(i||(i={}));var a=function(){var t=Object.keys(o.OrganismAction).map((function(t){return Number.parseInt(t)})).filter((function(t){return!Number.isNaN(t)}));return t[Math.floor(Math.random()*t.length)]},s=function(t){return Math.floor(Math.random()*t)},l=function(){function t(t,e,r){void 0===r&&(r={}),this.mutation–°hance=t,this.similarityLimit=e,this.reflexes=r}return t.prototype.getAction=function(t,e){var r,n=t.getEnergy()>50;if(e.visit({visitEmpty:function(t){r=i.EMPTY},visitWall:function(t){r=i.WALL},visitPlant:function(t){r=i.PLANT},visitMeat:function(t){r=i.MEAT},visitOrganism:function(e){r=t.isSimilar(e)?i.ORGANISM_SIMILAR:i.ORGANISM_OTHER}}),n&&r===i.EMPTY)return o.OrganismAction.DIVIDE;var a=this.reflexes["".concat(r)];return void 0===a||a===o.OrganismAction.DIVIDE&&!n?o.OrganismAction.NOTHING:a},t.prototype.compare=function(t){return 0},t.prototype.isSimilar=function(t){return this.compare(t)>=this.similarityLimit},t.prototype.clone=function(){var e,r,i=this.similarityLimit,o=this.mutation–°hance,l={};try{for(var u=n(t.generateReflexKeys()),c=u.next();!c.done;c=u.next()){var f=c.value;l[f]=this.reflexes[f]}}catch(t){e={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(e)throw e.error}}if(this.mutation–°hance>s(100)){var h=s(8);if(0===h)o+=5*(1===s(2)?-1:1);else if(1===h)i+=5*(1===s(2)?-1:1);else if(h>=2){var p=t.generateReflexKeys();l[p[s(p.length)]]=a()}}return new t(o,i,l)},t.generateReflexKeys=function(){var t,e,r=Object.values(i).filter((function(t){return"number"==typeof t})),o=[];try{for(var a=n(r),s=a.next();!s.done;s=a.next()){var l=s.value;o.push("".concat(l))}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}return o},t.createRandom=function(){var e,r,i={};try{for(var o=n(t.generateReflexKeys()),s=o.next();!s.done;s=o.next())i[s.value]=a()}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}return new t(Math.floor(100*Math.random()),Math.floor(100*Math.random()),i)},t}();e.default=l},189:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.cells=t,this.size=e,this.x=0,this.y=0}return t.prototype.next=function(){var t={cell:this.cells[this.x][this.y],x:this.x,y:this.y};return this.x++,this.x===this.size.getWidth()&&(this.x=0,this.y++),t},t.prototype.hasNext=function(){return this.y<this.size.getHeight()},t}();e.default=r},704:function(t,e,r){var n=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(904),o=r(189),a=function(){function t(t,e){this.size=t,this.cellFactory=e,this.cells={}}return t.prototype[Symbol.iterator]=function(){var t;return n(this,(function(e){switch(e.label){case 0:t=new o.default(this.createSnapshot(),this.size),e.label=1;case 1:return t.hasNext()?[4,t.next()]:[3,3];case 2:return e.sent(),[3,1];case 3:return[2]}}))},t.prototype.getSize=function(){return this.size},t.prototype.insert=function(t,e,r){(0,i.assertLessThan)(t,this.size.getWidth()),(0,i.assertLessThan)(e,this.size.getHeight()),(0,i.assertGreaterOrEqualThan)(t,0),(0,i.assertGreaterOrEqualThan)(e,0),this.cells["".concat(t,":").concat(e)]=r},t.prototype.delete=function(t,e){delete this.cells["".concat(t,":").concat(e)]},t.prototype.getCell=function(t,e){return this.cells["".concat(t,":").concat(e)]||this.cellFactory.createEmpty()},t.prototype.countEmpty=function(){var t=this.size.getCellCount();for(var e in this.cells)this.cells[e].isEmpty()&&t--;return t},t.prototype.createSnapshot=function(){for(var t=[],e=0;e<this.size.getWidth();e++){t[e]||(t[e]=[]);for(var r=0;r<this.size.getHeight();r++)t[e][r]=this.getCell(e,r)}return t},t}();e.default=a},874:function(t,e,r){var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.MeatCell=void 0;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visit=function(t){t.visitMeat(this)},e}(r(211).Cell);e.MeatCell=o},829:(t,e)=>{var r;Object.defineProperty(e,"__esModule",{value:!0}),e.OrganismAction=void 0,(r=e.OrganismAction||(e.OrganismAction={}))[r.ROTATE_LEFT=0]="ROTATE_LEFT",r[r.ROTATE_RIGHT=1]="ROTATE_RIGHT",r[r.STEP=2]="STEP",r[r.ATTACK=3]="ATTACK",r[r.EAT=4]="EAT",r[r.DIVIDE=5]="DIVIDE",r[r.NOTHING=6]="NOTHING"},815:function(t,e,r){var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},a=this&&this.__spreadArray||function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0}),e.OrganismCell=void 0;var s=r(211),l=r(467),u=r(675),c=r(829),f=function(t){function e(e,r,n){void 0===n&&(n=70);var i=t.call(this)||this;return i.color=e,i.genome=r,i.energy=n,i.lifetime=0,i.direction=u.Direction.random(),i}return i(e,t),e.prototype.getLifetime=function(){return this.lifetime},e.prototype.getEnergy=function(){return this.energy},e.prototype.getDirection=function(){return this.direction},e.prototype.getGenome=function(){return this.genome},e.prototype.visit=function(t){t.visitOrganism(this)},e.prototype.update=function(t){var e=this;if(this.lifetime>100||this.energy<=0)t.replace((function(t){return t.createMeat()}));else{var r=u.Direction.getOffset(this.direction),n=t.getByOffest.apply(t,a([],o(r),!1)),s=this.genome.getAction(this,n);if(s===c.OrganismAction.STEP)t.moveByOffest.apply(t,a([],o(r),!1)),this.energy--;else if(s===c.OrganismAction.ROTATE_LEFT)this.direction=u.Direction.rotateLeft(this.direction),this.energy--;else if(s===c.OrganismAction.ROTATE_RIGHT)this.direction=u.Direction.rotateLeft(this.direction),this.energy--;else if(s===c.OrganismAction.DIVIDE)n.isEmpty()&&(t.moveByOffest.apply(t,a([],o(r),!1)),this.energy=Math.floor(this.energy/2),t.replace((function(t){return t.createOrganism(e.color,e.genome.clone(),e.energy)})));else if(s===c.OrganismAction.ATTACK){var f=this;n.visit(new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visitOrganism=function(t){t.kill(),f.energy--},e}(l.default)))}else if(s===c.OrganismAction.EAT){var h=function(n){t.deleteByOffset.apply(t,a([],o(r),!1)),t.moveByOffest.apply(t,a([],o(r),!1)),e.energy+=n};n.visit(new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visitMeat=function(t){h(20)},e.prototype.visitPlant=function(t){h(20)},e}(l.default)))}this.lifetime++}},e.prototype.kill=function(){this.energy=0},e.prototype.isStatic=function(){return!1},e.prototype.isSimilar=function(t){return this.genome.isSimilar(t.getGenome())},e.prototype.getColor=function(){return this.color},e}(s.Cell);e.OrganismCell=f},906:function(t,e,r){var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.PlantCell=void 0;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visit=function(t){t.visitPlant(this)},e}(r(211).Cell);e.PlantCell=o},828:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Size=void 0;var n=r(904),i=function(){function t(t,e){this.width=t,this.height=e,(0,n.assertGreaterOrEqualThan)(t,0),(0,n.assertGreaterOrEqualThan)(e,0)}return t.prototype.getWidth=function(){return this.width},t.prototype.setWidth=function(e){return new t(e,this.height)},t.prototype.getHeight=function(){return this.height},t.prototype.setHeight=function(e){return new t(this.width,e)},t.prototype.getRatio=function(){return this.width/this.height},t.prototype.getCellCount=function(){return this.width*this.height},t}();e.Size=i},997:function(t,e,r){var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0}),e.WallCell=void 0;var o=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.visit=function(t){t.visitWall(this)},e}(r(211).Cell);e.WallCell=o},607:function(t,e,r){var n,i,o,a,s,l,u=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var c=r(469),f=r(18),h=r(188),p=r(816),y=r(828),d=r(173),v=document.getElementById("canvas"),g=document.getElementById("canvas-container");function T(t,e){t.setAttribute("width",e.clientWidth.toString()),t.setAttribute("height",e.clientHeight.toString())}T(v,g);var O=new f.default,_=new y.Size(200,100),E=new h.default(_,O);try{for(var m=u(E.getGrid()),S=m.next();!S.done;S=m.next()){var b=S.value,w=b.x,A=b.y;0!==w&&0!==A&&w!==_.getWidth()-1&&A!==_.getHeight()-1||E.getGrid().insert(w,A,O.createWall())}}catch(t){n={error:t}}finally{try{S&&!S.done&&(i=m.return)&&i.call(m)}finally{if(n)throw n.error}}try{for(var x=u(E.getGrid()),H=x.next();!H.done;H=x.next()){var M=H.value;w=M.x,A=M.y,M.cell.isEmpty()&&Math.random()<.1&&E.getGrid().insert(w,A,O.createPlant())}}catch(t){o={error:t}}finally{try{H&&!H.done&&(a=x.return)&&a.call(x)}finally{if(o)throw o.error}}try{for(var R=u(E.getGrid()),P=R.next();!P.done;P=R.next()){var N=P.value;w=N.x,A=N.y,N.cell.isEmpty()&&Math.random()<.01&&E.getGrid().insert(w,A,O.createOrganism(c.default.random(),p.default.createRandom()))}}catch(t){s={error:t}}finally{try{P&&!P.done&&(l=R.return)&&l.call(R)}finally{if(s)throw s.error}}var C=new d.default(v,E);C.render(),setTimeout((function t(){E.update(),C.render(),setTimeout(t,0)}),0),window.addEventListener("resize",(function(){T(v,g),C.render()}))},173:function(t,e,r){var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0});var i=r(675),o=function(){function t(t,e){this.canvas=t,this.game=e,this.context=t.getContext("2d")}return t.prototype.render=function(){var t,e,r,o,a=this,s=this.game.getGrid().getSize().getRatio(),l=this.canvas.width/this.canvas.height,u=[0,0];s>l?(r=this.canvas.width,o=this.canvas.width/s,u[1]=(this.canvas.height-o)/2):(r=this.canvas.height*s,o=this.canvas.height,u[0]=(this.canvas.width-r)/2);var c=r/this.game.getGrid().getSize().getWidth(),f=function(t,e,r){r.visit({visitEmpty:function(r){a.context.fillStyle="#000000";var n=u[0]+t*c,i=u[1]+e*c;a.context.fillRect(n,i,c,c)},visitWall:function(r){a.context.fillStyle="#5f5f5f";var n=u[0]+t*c,i=u[1]+e*c;a.context.fillRect(n,i,c,c)},visitPlant:function(r){a.context.fillStyle="#399200";var n=u[0]+t*c,i=u[1]+e*c;a.context.fillRect(n,i,c,c)},visitMeat:function(r){a.context.fillStyle="#FE7276";var n=u[0]+t*c,i=u[1]+e*c;a.context.fillRect(n,i,c,c)},visitOrganism:function(r){a.context.fillStyle=r.getColor().toHexFormat();var n=u[0]+t*c,o=u[1]+e*c;a.context.fillRect(n,o,c,c);var s,l=c/3;switch(r.getDirection()){case i.Direction.NORTH_WEST:s=[0,0];break;case i.Direction.NORTH:s=[l,0];break;case i.Direction.NORTH_EAST:s=[2*l,0];break;case i.Direction.SOUTH_WEST:s=[0,2*l];break;case i.Direction.SOUTH:s=[l,2*l];break;case i.Direction.SOUTH_EAST:s=[2*l,2*l];break;case i.Direction.WEST:s=[0,l];break;case i.Direction.EAST:s=[2*l,l]}a.context.fillStyle="#66A1D2",a.context.fillRect(n+s[0],o+s[1],l,l)}})};try{for(var h=n(this.game.getGrid()),p=h.next();!p.done;p=h.next()){var y=p.value;f(y.x,y.y,y.cell)}}catch(e){t={error:e}}finally{try{p&&!p.done&&(e=h.return)&&e.call(h)}finally{if(t)throw t.error}}},t}();e.default=o}},e={};!function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,