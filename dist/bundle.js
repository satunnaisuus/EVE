/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={766:(e,t,n)=>{n.r(t),n.d(t,{Observer:()=>N,clearTimers:()=>m,enableStaticRendering:()=>y,isObserverBatched:()=>u,isUsingStaticRendering:()=>b,observer:()=>C,observerBatching:()=>l,useAsObservableSource:()=>A,useLocalObservable:()=>R,useLocalStore:()=>L,useObserver:()=>M,useStaticRendering:()=>z});var r=n(949),a=n(294);if(!a.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!r.makeObservable)throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");var i=n(935);function o(e){e()}function l(e){e||(e=o),(0,r.configure)({reactionScheduler:e})}var u=function(){return!0};function s(e){return(0,r.getDependencyTree)(e)}var c="undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry;function f(e){return{reaction:e,mounted:!1,changedBeforeMount:!1,cleanAt:Date.now()+d}}var d=1e4,h=c?function(e){var t=new Map,n=1,r=new e((function(e){var n=t.get(e);n&&(n.reaction.dispose(),t.delete(e))}));return{addReactionToTrack:function(e,a,i){var o=n++;return r.register(i,o,e),e.current=f(a),e.current.finalizationRegistryCleanupToken=o,t.set(o,e.current),e.current},recordReactionAsCommitted:function(e){r.unregister(e),e.current&&e.current.finalizationRegistryCleanupToken&&t.delete(e.current.finalizationRegistryCleanupToken)},forceCleanupTimerToRunNowForTests:function(){},resetCleanupScheduleForTests:function(){}}}(c):function(){var e,t=new Set;function n(){void 0===e&&(e=setTimeout(r,1e4))}function r(){e=void 0;var r=Date.now();t.forEach((function(e){var n=e.current;n&&r>=n.cleanAt&&(n.reaction.dispose(),e.current=null,t.delete(e))})),t.size>0&&n()}return{addReactionToTrack:function(e,r,a){var i;return e.current=f(r),i=e,t.add(i),n(),e.current},recordReactionAsCommitted:function(e){t.delete(e)},forceCleanupTimerToRunNowForTests:function(){e&&(clearTimeout(e),r())},resetCleanupScheduleForTests:function(){var n,r;if(t.size>0){try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),i=a.next();!i.done;i=a.next()){var o=i.value,l=o.current;l&&(l.reaction.dispose(),o.current=null)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}t.clear()}e&&(clearTimeout(e),e=void 0)}}}(),p=h.addReactionToTrack,v=h.recordReactionAsCommitted,m=h.resetCleanupScheduleForTests,g=(h.forceCleanupTimerToRunNowForTests,!1);function y(e){g=e}function b(){return g}var _=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};function w(e){return"observer".concat(e)}var S=function(){};function k(){return new S}function E(e,t){if(void 0===t&&(t="observed"),b())return e();var n=_(a.useState(k),1)[0],i=_(a.useState(),2)[1],o=function(){return i([])},l=a.useRef(null);if(!l.current)var u=new r.Reaction(w(t),(function(){c.mounted?o():c.changedBeforeMount=!0})),c=p(l,u,n);var f,d,h=l.current.reaction;if(a.useDebugValue(h,s),a.useEffect((function(){return v(l),l.current?(l.current.mounted=!0,l.current.changedBeforeMount&&(l.current.changedBeforeMount=!1,o())):(l.current={reaction:new r.Reaction(w(t),(function(){o()})),mounted:!0,changedBeforeMount:!1,cleanAt:1/0},o()),function(){l.current.reaction.dispose(),l.current=null}}),[]),h.track((function(){try{f=e()}catch(e){d=e}})),d)throw d;return f}var O="function"==typeof Symbol&&Symbol.for,x=O?Symbol.for("react.forward_ref"):"function"==typeof a.forwardRef&&(0,a.forwardRef)((function(e){return null})).$$typeof,T=O?Symbol.for("react.memo"):"function"==typeof a.memo&&(0,a.memo)((function(e){return null})).$$typeof;function C(e,t){var n;if(T&&e.$$typeof===T)throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");if(b())return e;var r=null!==(n=null==t?void 0:t.forwardRef)&&void 0!==n&&n,i=e,o=e.displayName||e.name;if(x&&e.$$typeof===x&&(r=!0,"function"!=typeof(i=e.render)))throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");var l,u,s=function(e,t){return E((function(){return i(e,t)}),o)};return""!==o&&(s.displayName=o),e.contextTypes&&(s.contextTypes=e.contextTypes),r&&(s=(0,a.forwardRef)(s)),s=(0,a.memo)(s),l=e,u=s,Object.keys(l).forEach((function(e){P[e]||Object.defineProperty(u,e,Object.getOwnPropertyDescriptor(l,e))})),s}var P={$$typeof:!0,render:!0,compare:!0,type:!0,displayName:!0};function N(e){var t=e.children,n=e.render,r=t||n;return"function"!=typeof r?null:E(r)}function R(e,t){return(0,a.useState)((function(){return(0,r.observable)(e(),t,{autoBind:!0})}))[0]}N.displayName="Observer";function A(e){var t=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o}((0,a.useState)((function(){return(0,r.observable)(e,{},{deep:!1})})),1)[0];return(0,r.runInAction)((function(){Object.assign(t,e)})),t}function L(e,t){var n=t&&A(t);return(0,a.useState)((function(){return(0,r.observable)(e(n),void 0,{autoBind:!0})}))[0]}function M(e,t){return void 0===t&&(t="observed"),E(e,t)}function z(e){y(e)}l(i.unstable_batchedUpdates)},949:(e,t,n)=>{function r(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("number"==typeof e?"[MobX] minified error nr: "+e+(n.length?" "+n.map(String).join(","):"")+". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts":"[MobX] "+e)}n.r(t),n.d(t,{$mobx:()=>H,FlowCancellationError:()=>nn,ObservableMap:()=>cr,ObservableSet:()=>hr,Reaction:()=>St,_allowStateChanges:()=>Ve,_allowStateChangesInsideComputed:()=>Ft,_allowStateReadsEnd:()=>ot,_allowStateReadsStart:()=>it,_autoAction:()=>It,_endAction:()=>Ue,_getAdministration:()=>Ar,_getGlobalState:()=>ht,_interceptReads:()=>fn,_isComputingDerivation:()=>Ze,_resetGlobalState:()=>pt,_startAction:()=>Fe,action:()=>jt,autorun:()=>Vt,comparer:()=>q,computed:()=>Re,configure:()=>Qt,createAtom:()=>$,defineProperty:()=>xn,entries:()=>wn,extendObservable:()=>Yt,flow:()=>ln,flowResult:()=>sn,get:()=>On,getAtom:()=>Rr,getDebugName:()=>Lr,getDependencyTree:()=>Xt,getObserverTree:()=>Zt,has:()=>En,intercept:()=>dn,isAction:()=>Ut,isBoxedObservable:()=>qe,isComputed:()=>pn,isComputedProp:()=>vn,isFlow:()=>cn,isFlowCancellationError:()=>rn,isObservable:()=>gn,isObservableArray:()=>or,isObservableMap:()=>fr,isObservableObject:()=>wr,isObservableProp:()=>yn,isObservableSet:()=>pr,keys:()=>bn,makeAutoObservable:()=>Kn,makeObservable:()=>$n,observable:()=>Te,observe:()=>Cn,onBecomeObserved:()=>Gt,onBecomeUnobserved:()=>$t,onReactionError:()=>kt,override:()=>X,ownKeys:()=>Tn,reaction:()=>Wt,remove:()=>kn,runInAction:()=>Ft,set:()=>Sn,spy:()=>Ct,toJS:()=>Rn,trace:()=>An,transaction:()=>Mn,untracked:()=>nt,values:()=>_n,when:()=>zn});var a={};function i(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:a}var o=Object.assign,l=Object.getOwnPropertyDescriptor,u=Object.defineProperty,s=Object.prototype,c=[];Object.freeze(c);var f={};Object.freeze(f);var d="undefined"!=typeof Proxy,h=Object.toString();function p(){d||r("Proxy not available")}function v(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var m=function(){};function g(e){return"function"==typeof e}function y(e){switch(typeof e){case"string":case"symbol":case"number":return!0}return!1}function b(e){return null!==e&&"object"==typeof e}function _(e){if(!b(e))return!1;var t=Object.getPrototypeOf(e);if(null==t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n.toString()===h}function w(e){var t=null==e?void 0:e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName)}function S(e,t,n){u(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function k(e,t,n){u(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function E(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return b(e)&&!0===e[n]}}function O(e){return e instanceof Map}function x(e){return e instanceof Set}var T=void 0!==Object.getOwnPropertySymbols,C="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:T?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function P(e){return null===e?null:"object"==typeof e?""+e:e}function N(e,t){return s.hasOwnProperty.call(e,t)}var R=Object.getOwnPropertyDescriptors||function(e){var t={};return C(e).forEach((function(n){t[n]=l(e,n)})),t};function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e,t,n){return t&&A(e.prototype,t),n&&A(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function M(){return M=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},M.apply(this,arguments)}function z(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,D(e,t)}function D(e,t){return D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},D(e,t)}function j(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function F(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?I(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var U=Symbol("mobx-stored-annotations");function V(e){return Object.assign((function(t,n){B(t,n,e)}),e)}function B(e,t,n){N(e,U)||S(e,U,M({},e[U])),function(e){return e.annotationType_===Y}(n)||(e[U][t]=n)}var H=Symbol("mobx administration"),W=function(){function e(e){void 0===e&&(e="Atom"),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=We.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e}var t=e.prototype;return t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.reportObserved=function(){return _t(this)},t.reportChanged=function(){yt(),wt(this),bt()},t.toString=function(){return this.name_},e}(),G=E("Atom",W);function $(e,t,n){void 0===t&&(t=m),void 0===n&&(n=m);var r=new W(e);return t!==m&&Gt(r,t),n!==m&&$t(r,n),r}var q={identity:function(e,t){return e===t},structural:function(e,t){return zr(e,t)},default:function(e,t){return Object.is?Object.is(e,t):e===t?0!==e||1/e==1/t:e!=e&&t!=t},shallow:function(e,t){return zr(e,t,1)}};function K(e,t,n){return gn(e)?e:Array.isArray(e)?Te.array(e,{name:n}):_(e)?Te.object(e,void 0,{name:n}):O(e)?Te.map(e,{name:n}):x(e)?Te.set(e,{name:n}):"function"!=typeof e||Ut(e)||cn(e)?e:w(e)?ln(e):It(n,e)}function Q(e){return e}var Y="override",X=V({annotationType_:Y,make_:function(e,t){return 0},extend_:function(e,t,n,a){r("'"+this.annotationType_+"' can only be used with 'makeObservable'")}});function J(e,t){return{annotationType_:e,options_:t,make_:Z,extend_:ee}}function Z(e,t,n,r){var a;if(null!=(a=this.options_)&&a.bound)return null===this.extend_(e,t,n,!1)?0:1;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(Ut(n.value))return 1;var i=te(e,this,t,n,!1);return u(r,t,i),2}function ee(e,t,n,r){var a=te(e,this,t,n);return e.defineProperty_(t,a,r)}function te(e,t,n,r,a){var i,o,l,u,s,c,f,d;void 0===a&&(a=dt.safeDescriptors),d=r,t.annotationType_,d.value;var h,p=r.value;return null!=(i=t.options_)&&i.bound&&(p=p.bind(null!=(h=e.proxy_)?h:e.target_)),{value:je(null!=(o=null==(l=t.options_)?void 0:l.name)?o:n.toString(),p,null!=(u=null==(s=t.options_)?void 0:s.autoAction)&&u,null!=(c=t.options_)&&c.bound?null!=(f=e.proxy_)?f:e.target_:void 0),configurable:!a||e.isPlainObject_,enumerable:!1,writable:!a}}function ne(e,t){return{annotationType_:e,options_:t,make_:re,extend_:ae}}function re(e,t,n,r){var a;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(null!=(a=this.options_)&&a.bound&&(!N(e.target_,t)||!cn(e.target_[t]))&&null===this.extend_(e,t,n,!1))return 0;if(cn(n.value))return 1;var i=ie(e,this,0,n,!1,!1);return u(r,t,i),2}function ae(e,t,n,r){var a,i=ie(e,this,0,n,null==(a=this.options_)?void 0:a.bound);return e.defineProperty_(t,i,r)}function ie(e,t,n,r,a,i){var o;void 0===i&&(i=dt.safeDescriptors),o=r,t.annotationType_,o.value;var l,u=r.value;return cn(u)||(u=ln(u)),a&&((u=u.bind(null!=(l=e.proxy_)?l:e.target_)).isMobXFlow=!0),{value:u,configurable:!i||e.isPlainObject_,enumerable:!1,writable:!i}}function oe(e,t){return{annotationType_:e,options_:t,make_:le,extend_:ue}}function le(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function ue(e,t,n,r){return a=n,this.annotationType_,a.get,e.defineComputedProperty_(t,M({},this.options_,{get:n.get,set:n.set}),r);var a}function se(e,t){return{annotationType_:e,options_:t,make_:ce,extend_:fe}}function ce(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function fe(e,t,n,r){var a,i;return this.annotationType_,e.defineObservableProperty_(t,n.value,null!=(a=null==(i=this.options_)?void 0:i.enhancer)?a:K,r)}var de=he();function he(e){return{annotationType_:"true",options_:e,make_:pe,extend_:ve}}function pe(e,t,n,r){var a,i,o,l;if(n.get)return Re.make_(e,t,n,r);if(n.set){var s=je(t.toString(),n.set);return r===e.target_?null===e.defineProperty_(t,{configurable:!dt.safeDescriptors||e.isPlainObject_,set:s})?0:2:(u(r,t,{configurable:!0,set:s}),2)}if(r!==e.target_&&"function"==typeof n.value)return w(n.value)?(null!=(l=this.options_)&&l.autoBind?ln.bound:ln).make_(e,t,n,r):(null!=(o=this.options_)&&o.autoBind?It.bound:It).make_(e,t,n,r);var c,f=!1===(null==(a=this.options_)?void 0:a.deep)?Te.ref:Te;return"function"==typeof n.value&&null!=(i=this.options_)&&i.autoBind&&(n.value=n.value.bind(null!=(c=e.proxy_)?c:e.target_)),f.make_(e,t,n,r)}function ve(e,t,n,r){var a,i,o;return n.get?Re.extend_(e,t,n,r):n.set?e.defineProperty_(t,{configurable:!dt.safeDescriptors||e.isPlainObject_,set:je(t.toString(),n.set)},r):("function"==typeof n.value&&null!=(a=this.options_)&&a.autoBind&&(n.value=n.value.bind(null!=(o=e.proxy_)?o:e.target_)),(!1===(null==(i=this.options_)?void 0:i.deep)?Te.ref:Te).extend_(e,t,n,r))}var me={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function ge(e){return e||me}Object.freeze(me);var ye=se("observable"),be=se("observable.ref",{enhancer:Q}),_e=se("observable.shallow",{enhancer:function(e,t,n){return null==e||wr(e)||or(e)||fr(e)||pr(e)?e:Array.isArray(e)?Te.array(e,{name:n,deep:!1}):_(e)?Te.object(e,void 0,{name:n,deep:!1}):O(e)?Te.map(e,{name:n,deep:!1}):x(e)?Te.set(e,{name:n,deep:!1}):void 0}}),we=se("observable.struct",{enhancer:function(e,t){return zr(e,t)?t:e}}),Se=V(ye);function ke(e){return!0===e.deep?K:!1===e.deep?Q:(t=e.defaultDecorator)&&null!=(n=null==(r=t.options_)?void 0:r.enhancer)?n:K;var t,n,r}function Ee(e,t,n){if(!y(t))return gn(e)?e:_(e)?Te.object(e,t,n):Array.isArray(e)?Te.array(e,t):O(e)?Te.map(e,t):x(e)?Te.set(e,t):"object"==typeof e&&null!==e?e:Te.box(e,t);B(e,t,ye)}Object.assign(Ee,Se);var Oe,xe,Te=o(Ee,{box:function(e,t){var n=ge(t);return new $e(e,ke(n),n.name,!0,n.equals)},array:function(e,t){var n=ge(t);return(!1===dt.useProxies||!1===n.proxy?Nr:Zn)(e,ke(n),n.name)},map:function(e,t){var n=ge(t);return new cr(e,ke(n),n.name)},set:function(e,t){var n=ge(t);return new hr(e,ke(n),n.name)},object:function(e,t,n){return Yt(!1===dt.useProxies||!1===(null==n?void 0:n.proxy)?yr({},n):function(e,t){var n,r;return p(),null!=(r=(n=(e=yr(e,t))[H]).proxy_)?r:n.proxy_=new Proxy(e,Fn)}({},n),e,t)},ref:V(be),shallow:V(_e),deep:Se,struct:V(we)}),Ce="computed",Pe=oe(Ce),Ne=oe("computed.struct",{equals:q.structural}),Re=function(e,t){if(y(t))return B(e,t,Pe);if(_(e))return V(oe(Ce,e));var n=_(t)?t:{};return n.get=e,n.name||(n.name=e.name||""),new Ke(n)};Object.assign(Re,Pe),Re.struct=V(Ne);var Ae,Le=0,Me=1,ze=null!=(Oe=null==(xe=l((function(){}),"name"))?void 0:xe.configurable)&&Oe,De={value:"action",configurable:!0,writable:!1,enumerable:!1};function je(e,t,n,r){function a(){return Ie(e,n,t,r||this,arguments)}return void 0===n&&(n=!1),a.isMobxAction=!0,ze&&(De.value=e,Object.defineProperty(a,"name",De)),a}function Ie(e,t,n,r,a){var i=Fe(0,t);try{return n.apply(r,a)}catch(e){throw i.error_=e,e}finally{Ue(i)}}function Fe(e,t,n,r){var a=dt.trackingDerivation,i=!t||!a;yt();var o=dt.allowStateChanges;i&&(rt(),o=Be(!0));var l={runAsAction_:i,prevDerivation_:a,prevAllowStateChanges_:o,prevAllowStateReads_:it(!0),notifySpy_:!1,startTime_:0,actionId_:Me++,parentActionId_:Le};return Le=l.actionId_,l}function Ue(e){Le!==e.actionId_&&r(30),Le=e.parentActionId_,void 0!==e.error_&&(dt.suppressReactionErrors=!0),He(e.prevAllowStateChanges_),ot(e.prevAllowStateReads_),bt(),e.runAsAction_&&at(e.prevDerivation_),dt.suppressReactionErrors=!1}function Ve(e,t){var n=Be(e);try{return t()}finally{He(n)}}function Be(e){var t=dt.allowStateChanges;return dt.allowStateChanges=e,t}function He(e){dt.allowStateChanges=e}Ae=Symbol.toPrimitive;var We,Ge,$e=function(e,t){function n(t,n,r,a,i){var o;return void 0===r&&(r="ObservableValue"),void 0===a&&(a=!0),void 0===i&&(i=q.default),(o=e.call(this,r)||this).enhancer=void 0,o.name_=void 0,o.equals=void 0,o.hasUnreportedChange_=!1,o.interceptors_=void 0,o.changeListeners_=void 0,o.value_=void 0,o.dehancer=void 0,o.enhancer=n,o.name_=r,o.equals=i,o.value_=n(t,void 0,r),o}z(n,e);var r=n.prototype;return r.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},r.set=function(e){this.value_,(e=this.prepareNewValue_(e))!==dt.UNCHANGED&&this.setNewValue_(e)},r.prepareNewValue_=function(e){if(Un(this)){var t=Bn(this,{object:this,type:Yn,newValue:e});if(!t)return dt.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?dt.UNCHANGED:e},r.setNewValue_=function(e){var t=this.value_;this.value_=e,this.reportChanged(),Hn(this)&&Gn(this,{type:Yn,object:this,newValue:e,oldValue:t})},r.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},r.intercept_=function(e){return Vn(this,e)},r.observe_=function(e,t){return t&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:Yn,newValue:this.value_,oldValue:void 0}),Wn(this,e)},r.raw=function(){return this.value_},r.toJSON=function(){return this.get()},r.toString=function(){return this.name_+"["+this.value_+"]"},r.valueOf=function(){return P(this.get())},r[t]=function(){return this.valueOf()},n}(W,Ae),qe=E("ObservableValue",$e),Ke=function(e){function t(e){this.dependenciesState_=We.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=We.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new Ye(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=Ge.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,e.get||r(31),this.derivation=e.get,this.name_=e.name||"ComputedValue",e.set&&(this.setter_=je("ComputedValue-setter",e.set)),this.equals_=e.equals||(e.compareStructural||e.struct?q.structural:q.default),this.scope_=e.context,this.requiresReaction_=e.requiresReaction,this.keepAlive_=!!e.keepAlive}var n=t.prototype;return n.onBecomeStale_=function(){!function(e){e.lowestObserverState_===We.UP_TO_DATE_&&(e.lowestObserverState_=We.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===We.UP_TO_DATE_&&(e.dependenciesState_=We.POSSIBLY_STALE_,e.onBecomeStale_())})))}(this)},n.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},n.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},n.get=function(){if(this.isComputing_&&r(32,this.name_,this.derivation),0!==dt.inBatch||0!==this.observers_.size||this.keepAlive_){if(_t(this),Je(this)){var e=dt.trackingContext;this.keepAlive_&&!e&&(dt.trackingContext=this),this.trackAndCompute()&&function(e){e.lowestObserverState_!==We.STALE_&&(e.lowestObserverState_=We.STALE_,e.observers_.forEach((function(t){t.dependenciesState_===We.POSSIBLY_STALE_?t.dependenciesState_=We.STALE_:t.dependenciesState_===We.UP_TO_DATE_&&(e.lowestObserverState_=We.UP_TO_DATE_)})))}(this),dt.trackingContext=e}}else Je(this)&&(this.warnAboutUntrackedRead_(),yt(),this.value_=this.computeValue_(!1),bt());var t=this.value_;if(Xe(t))throw t.cause;return t},n.set=function(e){if(this.setter_){this.isRunningSetter_&&r(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,e)}finally{this.isRunningSetter_=!1}}else r(34,this.name_)},n.trackAndCompute=function(){var e=this.value_,t=this.dependenciesState_===We.NOT_TRACKING_,n=this.computeValue_(!0),r=t||Xe(e)||Xe(n)||!this.equals_(e,n);return r&&(this.value_=n),r},n.computeValue_=function(e){this.isComputing_=!0;var t,n=Be(!1);if(e)t=et(this,this.derivation,this.scope_);else if(!0===dt.disableErrorBoundaries)t=this.derivation.call(this.scope_);else try{t=this.derivation.call(this.scope_)}catch(e){t=new Ye(e)}return He(n),this.isComputing_=!1,t},n.suspend_=function(){this.keepAlive_||(tt(this),this.value_=void 0)},n.observe_=function(e,t){var n=this,r=!0,a=void 0;return Vt((function(){var i=n.get();if(!r||t){var o=rt();e({observableKind:"computed",debugObjectName:n.name_,type:Yn,object:n,newValue:i,oldValue:a}),at(o)}r=!1,a=i}))},n.warnAboutUntrackedRead_=function(){},n.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},n.valueOf=function(){return P(this.get())},n[e]=function(){return this.valueOf()},t}(Symbol.toPrimitive),Qe=E("ComputedValue",Ke);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}(We||(We={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Ge||(Ge={}));var Ye=function(e){this.cause=void 0,this.cause=e};function Xe(e){return e instanceof Ye}function Je(e){switch(e.dependenciesState_){case We.UP_TO_DATE_:return!1;case We.NOT_TRACKING_:case We.STALE_:return!0;case We.POSSIBLY_STALE_:for(var t=it(!0),n=rt(),r=e.observing_,a=r.length,i=0;i<a;i++){var o=r[i];if(Qe(o)){if(dt.disableErrorBoundaries)o.get();else try{o.get()}catch(e){return at(n),ot(t),!0}if(e.dependenciesState_===We.STALE_)return at(n),ot(t),!0}}return lt(e),at(n),ot(t),!1}}function Ze(){return null!==dt.trackingDerivation}function et(e,t,n){var r=it(!0);lt(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++dt.runId;var a,i=dt.trackingDerivation;if(dt.trackingDerivation=e,dt.inBatch++,!0===dt.disableErrorBoundaries)a=t.call(n);else try{a=t.call(n)}catch(e){a=new Ye(e)}return dt.inBatch--,dt.trackingDerivation=i,function(e){for(var t=e.observing_,n=e.observing_=e.newObserving_,r=We.UP_TO_DATE_,a=0,i=e.unboundDepsCount_,o=0;o<i;o++){var l=n[o];0===l.diffValue_&&(l.diffValue_=1,a!==o&&(n[a]=l),a++),l.dependenciesState_>r&&(r=l.dependenciesState_)}for(n.length=a,e.newObserving_=null,i=t.length;i--;){var u=t[i];0===u.diffValue_&&mt(u,e),u.diffValue_=0}for(;a--;){var s=n[a];1===s.diffValue_&&(s.diffValue_=0,vt(s,e))}r!==We.UP_TO_DATE_&&(e.dependenciesState_=r,e.onBecomeStale_())}(e),ot(r),a}function tt(e){var t=e.observing_;e.observing_=[];for(var n=t.length;n--;)mt(t[n],e);e.dependenciesState_=We.NOT_TRACKING_}function nt(e){var t=rt();try{return e()}finally{at(t)}}function rt(){var e=dt.trackingDerivation;return dt.trackingDerivation=null,e}function at(e){dt.trackingDerivation=e}function it(e){var t=dt.allowStateReads;return dt.allowStateReads=e,t}function ot(e){dt.allowStateReads=e}function lt(e){if(e.dependenciesState_!==We.UP_TO_DATE_){e.dependenciesState_=We.UP_TO_DATE_;for(var t=e.observing_,n=t.length;n--;)t[n].lowestObserverState_=We.UP_TO_DATE_}}var ut=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","allowStateReads","disableErrorBoundaries","runId","UNCHANGED","useProxies"],st=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0},ct=!0,ft=!1,dt=function(){var e=i();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(ct=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new st).version&&(ct=!1),ct?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new st):(setTimeout((function(){ft||r(35)}),1),new st)}();function ht(){return dt}function pt(){var e=new st;for(var t in e)-1===ut.indexOf(t)&&(dt[t]=e[t]);dt.allowStateChanges=!dt.enforceActions}function vt(e,t){e.observers_.add(t),e.lowestObserverState_>t.dependenciesState_&&(e.lowestObserverState_=t.dependenciesState_)}function mt(e,t){e.observers_.delete(t),0===e.observers_.size&&gt(e)}function gt(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,dt.pendingUnobservations.push(e))}function yt(){dt.inBatch++}function bt(){if(0==--dt.inBatch){Ot();for(var e=dt.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation_=!1,0===n.observers_.size&&(n.isBeingObserved_&&(n.isBeingObserved_=!1,n.onBUO()),n instanceof Ke&&n.suspend_())}dt.pendingUnobservations=[]}}function _t(e){var t=dt.trackingDerivation;return null!==t?(t.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=t.runId_,t.newObserving_[t.unboundDepsCount_++]=e,!e.isBeingObserved_&&dt.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),!0):(0===e.observers_.size&&dt.inBatch>0&&gt(e),!1)}function wt(e){e.lowestObserverState_!==We.STALE_&&(e.lowestObserverState_=We.STALE_,e.observers_.forEach((function(e){e.dependenciesState_===We.UP_TO_DATE_&&e.onBecomeStale_(),e.dependenciesState_=We.STALE_})))}var St=function(){function e(e,t,n,r){void 0===e&&(e="Reaction"),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=We.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=Ge.NONE,this.name_=e,this.onInvalidate_=t,this.errorHandler_=n,this.requiresObservable_=r}var t=e.prototype;return t.onBecomeStale_=function(){this.schedule_()},t.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,dt.pendingReactions.push(this),Ot())},t.isScheduled=function(){return this.isScheduled_},t.runReaction_=function(){if(!this.isDisposed_){yt(),this.isScheduled_=!1;var e=dt.trackingContext;if(dt.trackingContext=this,Je(this)){this.isTrackPending_=!0;try{this.onInvalidate_()}catch(e){this.reportExceptionInDerivation_(e)}}dt.trackingContext=e,bt()}},t.track=function(e){if(!this.isDisposed_){yt(),this.isRunning_=!0;var t=dt.trackingContext;dt.trackingContext=this;var n=et(this,e,void 0);dt.trackingContext=t,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&tt(this),Xe(n)&&this.reportExceptionInDerivation_(n.cause),bt()}},t.reportExceptionInDerivation_=function(e){var t=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(dt.disableErrorBoundaries)throw e;var n="[mobx] uncaught error in '"+this+"'";dt.suppressReactionErrors||console.error(n,e),dt.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},t.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(yt(),tt(this),bt()))},t.getDisposer_=function(){var e=this.dispose.bind(this);return e[H]=this,e},t.toString=function(){return"Reaction["+this.name_+"]"},t.trace=function(e){void 0===e&&(e=!1),An(this,e)},e}();function kt(e){return dt.globalReactionErrorHandlers.push(e),function(){var t=dt.globalReactionErrorHandlers.indexOf(e);t>=0&&dt.globalReactionErrorHandlers.splice(t,1)}}var Et=function(e){return e()};function Ot(){dt.inBatch>0||dt.isRunningReactions||Et(xt)}function xt(){dt.isRunningReactions=!0;for(var e=dt.pendingReactions,t=0;e.length>0;){100==++t&&(console.error("[mobx] cycle in reaction: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,a=n.length;r<a;r++)n[r].runReaction_()}dt.isRunningReactions=!1}var Tt=E("Reaction",St);function Ct(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}var Pt="action",Nt="autoAction",Rt="<unnamed action>",At=J(Pt),Lt=J("action.bound",{bound:!0}),Mt=J(Nt,{autoAction:!0}),zt=J("autoAction.bound",{autoAction:!0,bound:!0});function Dt(e){return function(t,n){return g(t)?je(t.name||Rt,t,e):g(n)?je(t,n,e):y(n)?B(t,n,e?Mt:At):y(t)?V(J(e?Nt:Pt,{name:t,autoAction:e})):void 0}}var jt=Dt(!1);Object.assign(jt,At);var It=Dt(!0);function Ft(e){return Ie(e.name,!1,e,this,void 0)}function Ut(e){return g(e)&&!0===e.isMobxAction}function Vt(e,t){var n,r;void 0===t&&(t=f);var a,i=null!=(n=null==(r=t)?void 0:r.name)?n:"Autorun";if(t.scheduler||t.delay){var o=Ht(t),l=!1;a=new St(i,(function(){l||(l=!0,o((function(){l=!1,a.isDisposed_||a.track(u)})))}),t.onError,t.requiresObservable)}else a=new St(i,(function(){this.track(u)}),t.onError,t.requiresObservable);function u(){e(a)}return a.schedule_(),a.getDisposer_()}Object.assign(It,Mt),jt.bound=V(Lt),It.bound=V(zt);var Bt=function(e){return e()};function Ht(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:Bt}function Wt(e,t,n){var r;void 0===n&&(n=f);var a,i,o,l,u=null!=(r=n.name)?r:"Reaction",s=jt(u,n.onError?(a=n.onError,i=t,function(){try{return i.apply(this,arguments)}catch(e){a.call(this,e)}}):t),c=!n.scheduler&&!n.delay,d=Ht(n),h=!0,p=!1,v=n.compareStructural?q.structural:n.equals||q.default,m=new St(u,(function(){h||c?g():p||(p=!0,d(g))}),n.onError,n.requiresObservable);function g(){if(p=!1,!m.isDisposed_){var t=!1;m.track((function(){var n=Ve(!1,(function(){return e(m)}));t=h||!v(o,n),l=o,o=n})),(h&&n.fireImmediately||!h&&t)&&s(o,l,m),h=!1}}return m.schedule_(),m.getDisposer_()}function Gt(e,t,n){return qt("onBO",e,t,n)}function $t(e,t,n){return qt("onBUO",e,t,n)}function qt(e,t,n,r){var a="function"==typeof r?Rr(t,n):Rr(t),i=g(r)?r:n,o=e+"L";return a[o]?a[o].add(i):a[o]=new Set([i]),function(){var e=a[o];e&&(e.delete(i),0===e.size&&delete a[o])}}var Kt="always";function Qt(e){!0===e.isolateGlobalState&&function(){if((dt.pendingReactions.length||dt.inBatch||dt.isRunningReactions)&&r(36),ft=!0,ct){var e=i();0==--e.__mobxInstanceCount&&(e.__mobxGlobals=void 0),dt=new st}}();var t,n,a=e.useProxies,o=e.enforceActions;if(void 0!==a&&(dt.useProxies=a===Kt||"never"!==a&&"undefined"!=typeof Proxy),"ifavailable"===a&&(dt.verifyProxies=!0),void 0!==o){var l=o===Kt?Kt:"observed"===o;dt.enforceActions=l,dt.allowStateChanges=!0!==l&&l!==Kt}["computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","safeDescriptors"].forEach((function(t){t in e&&(dt[t]=!!e[t])})),dt.allowStateReads=!dt.observableRequiresReaction,e.reactionScheduler&&(t=e.reactionScheduler,n=Et,Et=function(e){return t((function(){return n(e)}))})}function Yt(e,t,n,r){var a=R(t),i=yr(e,r)[H];yt();try{C(a).forEach((function(e){i.extend_(e,a[e],!n||!(e in n)||n[e])}))}finally{bt()}return e}function Xt(e,t){return Jt(Rr(e,t))}function Jt(e){var t,n={name:e.name_};return e.observing_&&e.observing_.length>0&&(n.dependencies=(t=e.observing_,Array.from(new Set(t))).map(Jt)),n}function Zt(e,t){return en(Rr(e,t))}function en(e){var t={name:e.name_};return function(e){return e.observers_&&e.observers_.size>0}(e)&&(t.observers=Array.from(function(e){return e.observers_}(e)).map(en)),t}var tn=0;function nn(){this.message="FLOW_CANCELLED"}function rn(e){return e instanceof nn}nn.prototype=Object.create(Error.prototype);var an=ne("flow"),on=ne("flow.bound",{bound:!0}),ln=Object.assign((function(e,t){if(y(t))return B(e,t,an);var n=e,r=n.name||"<unnamed flow>",a=function(){var e,t=this,a=arguments,i=++tn,o=jt(r+" - runid: "+i+" - init",n).apply(t,a),l=void 0,u=new Promise((function(t,n){var a=0;function u(e){var t;l=void 0;try{t=jt(r+" - runid: "+i+" - yield "+a++,o.next).call(o,e)}catch(e){return n(e)}c(t)}function s(e){var t;l=void 0;try{t=jt(r+" - runid: "+i+" - yield "+a++,o.throw).call(o,e)}catch(e){return n(e)}c(t)}function c(e){if(!g(null==e?void 0:e.then))return e.done?t(e.value):(l=Promise.resolve(e.value)).then(u,s);e.then(c,n)}e=n,u(void 0)}));return u.cancel=jt(r+" - runid: "+i+" - cancel",(function(){try{l&&un(l);var t=o.return(void 0),n=Promise.resolve(t.value);n.then(m,m),un(n),e(new nn)}catch(t){e(t)}})),u};return a.isMobXFlow=!0,a}),an);function un(e){g(e.cancel)&&e.cancel()}function sn(e){return e}function cn(e){return!0===(null==e?void 0:e.isMobXFlow)}function fn(e,t,n){var r;return fr(e)||or(e)||qe(e)?r=Ar(e):wr(e)&&(r=Ar(e,t)),r.dehancer="function"==typeof t?t:n,function(){r.dehancer=void 0}}function dn(e,t,n){return g(n)?function(e,t,n){return Ar(e,t).intercept_(n)}(e,t,n):function(e,t){return Ar(e).intercept_(t)}(e,t)}function hn(e,t){if(void 0===t)return Qe(e);if(!1===wr(e))return!1;if(!e[H].values_.has(t))return!1;var n=Rr(e,t);return Qe(n)}function pn(e){return hn(e)}function vn(e,t){return hn(e,t)}function mn(e,t){return!!e&&(void 0!==t?!!wr(e)&&e[H].values_.has(t):wr(e)||!!e[H]||G(e)||Tt(e)||Qe(e))}function gn(e){return mn(e)}function yn(e,t){return mn(e,t)}function bn(e){return wr(e)?e[H].keys_():fr(e)||pr(e)?Array.from(e.keys()):or(e)?e.map((function(e,t){return t})):void r(5)}function _n(e){return wr(e)?bn(e).map((function(t){return e[t]})):fr(e)?bn(e).map((function(t){return e.get(t)})):pr(e)?Array.from(e.values()):or(e)?e.slice():void r(6)}function wn(e){return wr(e)?bn(e).map((function(t){return[t,e[t]]})):fr(e)?bn(e).map((function(t){return[t,e.get(t)]})):pr(e)?Array.from(e.entries()):or(e)?e.map((function(e,t){return[t,e]})):void r(7)}function Sn(e,t,n){if(2!==arguments.length||pr(e))wr(e)?e[H].set_(t,n):fr(e)?e.set(t,n):pr(e)?e.add(t):or(e)?("number"!=typeof t&&(t=parseInt(t,10)),t<0&&r("Invalid index: '"+t+"'"),yt(),t>=e.length&&(e.length=t+1),e[t]=n,bt()):r(8);else{yt();var a=t;try{for(var i in a)Sn(e,i,a[i])}finally{bt()}}}function kn(e,t){wr(e)?e[H].delete_(t):fr(e)||pr(e)?e.delete(t):or(e)?("number"!=typeof t&&(t=parseInt(t,10)),e.splice(t,1)):r(9)}function En(e,t){return wr(e)?e[H].has_(t):fr(e)||pr(e)?e.has(t):or(e)?t>=0&&t<e.length:void r(10)}function On(e,t){if(En(e,t))return wr(e)?e[H].get_(t):fr(e)?e.get(t):or(e)?e[t]:void r(11)}function xn(e,t,n){if(wr(e))return e[H].defineProperty_(t,n);r(39)}function Tn(e){if(wr(e))return e[H].ownKeys_();r(38)}function Cn(e,t,n,r){return g(n)?function(e,t,n,r){return Ar(e,t).observe_(n,r)}(e,t,n,r):function(e,t,n){return Ar(e).observe_(t,n)}(e,t,n)}function Pn(e,t,n){return e.set(t,n),n}function Nn(e,t){if(null==e||"object"!=typeof e||e instanceof Date||!gn(e))return e;if(qe(e)||Qe(e))return Nn(e.get(),t);if(t.has(e))return t.get(e);if(or(e)){var n=Pn(t,e,new Array(e.length));return e.forEach((function(e,r){n[r]=Nn(e,t)})),n}if(pr(e)){var r=Pn(t,e,new Set);return e.forEach((function(e){r.add(Nn(e,t))})),r}if(fr(e)){var a=Pn(t,e,new Map);return e.forEach((function(e,n){a.set(n,Nn(e,t))})),a}var i=Pn(t,e,{});return Tn(e).forEach((function(n){s.propertyIsEnumerable.call(e,n)&&(i[n]=Nn(e[n],t))})),i}function Rn(e,t){return Nn(e,new Map)}function An(){r("trace() is not available in production builds");for(var e=!1,t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];"boolean"==typeof n[n.length-1]&&(e=n.pop());var i=Ln(n);if(!i)return r("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");i.isTracing_===Ge.NONE&&console.log("[mobx.trace] '"+i.name_+"' tracing enabled"),i.isTracing_=e?Ge.BREAK:Ge.LOG}function Ln(e){switch(e.length){case 0:return dt.trackingDerivation;case 1:return Rr(e[0]);case 2:return Rr(e[0],e[1])}}function Mn(e,t){void 0===t&&(t=void 0),yt();try{return e.apply(t)}finally{bt()}}function zn(e,t,n){return 1===arguments.length||t&&"object"==typeof t?jn(e,t):Dn(e,t,n||{})}function Dn(e,t,n){var r;if("number"==typeof n.timeout){var a=new Error("WHEN_TIMEOUT");r=setTimeout((function(){if(!o[H].isDisposed_){if(o(),!n.onError)throw a;n.onError(a)}}),n.timeout)}n.name="When";var i=je("When-effect",t),o=Vt((function(t){Ve(!1,e)&&(t.dispose(),r&&clearTimeout(r),i())}),n);return o}function jn(e,t){var n,r=new Promise((function(r,a){var i=Dn(e,r,M({},t,{onError:a}));n=function(){i(),a(new Error("WHEN_CANCELLED"))}}));return r.cancel=n,r}function In(e){return e[H]}ln.bound=V(on);var Fn={has:function(e,t){return In(e).has_(t)},get:function(e,t){return In(e).get_(t)},set:function(e,t,n){var r;return!!y(t)&&(null==(r=In(e).set_(t,n,!0))||r)},deleteProperty:function(e,t){var n;return!!y(t)&&(null==(n=In(e).delete_(t,!0))||n)},defineProperty:function(e,t,n){var r;return null==(r=In(e).defineProperty_(t,n))||r},ownKeys:function(e){return In(e).ownKeys_()},preventExtensions:function(e){r(13)}};function Un(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function Vn(e,t){var n=e.interceptors_||(e.interceptors_=[]);return n.push(t),v((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Bn(e,t){var n=rt();try{for(var a=[].concat(e.interceptors_||[]),i=0,o=a.length;i<o&&((t=a[i](t))&&!t.type&&r(14),t);i++);return t}finally{at(n)}}function Hn(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function Wn(e,t){var n=e.changeListeners_||(e.changeListeners_=[]);return n.push(t),v((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function Gn(e,t){var n=rt(),r=e.changeListeners_;if(r){for(var a=0,i=(r=r.slice()).length;a<i;a++)r[a](t);at(n)}}function $n(e,t,n){var r=yr(e,n)[H];yt();try{null!=t||(t=function(e){return N(e,U)||S(e,U,M({},e[U])),e[U]}(e)),C(t).forEach((function(e){return r.make_(e,t[e])}))}finally{bt()}return e}var qn=Symbol("mobx-keys");function Kn(e,t,n){if(_(e))return Yt(e,e,t,n);var r=yr(e,n)[H];if(!e[qn]){var a=Object.getPrototypeOf(e),i=new Set([].concat(C(e),C(a)));i.delete("constructor"),i.delete(H),S(a,qn,i)}yt();try{e[qn].forEach((function(e){return r.make_(e,!t||!(e in t)||t[e])}))}finally{bt()}return e}var Qn="splice",Yn="update",Xn={get:function(e,t){var n=e[H];return t===H?n:"length"===t?n.getArrayLength_():"string"!=typeof t||isNaN(t)?N(er,t)?er[t]:e[t]:n.get_(parseInt(t))},set:function(e,t,n){var r=e[H];return"length"===t&&r.setArrayLength_(n),"symbol"==typeof t||isNaN(t)?e[t]=n:r.set_(parseInt(t),n),!0},preventExtensions:function(){r(15)}},Jn=function(){function e(e,t,n,r){void 0===e&&(e="ObservableArray"),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=n,this.legacyMode_=r,this.atom_=new W(e),this.enhancer_=function(e,n){return t(e,n,"ObservableArray[..]")}}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return Vn(this,e)},t.observe_=function(e,t){return void 0===t&&(t=!1),t&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),Wn(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(e){("number"!=typeof e||isNaN(e)||e<0)&&r("Out of range: "+e);var t=this.values_.length;if(e!==t)if(e>t){for(var n=new Array(e-t),a=0;a<e-t;a++)n[a]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(e,t-e)},t.updateArrayLength_=function(e,t){e!==this.lastKnownLength_&&r(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&Pr(e+t+1)},t.spliceWithArray_=function(e,t,n){var r=this;this.atom_;var a=this.values_.length;if(void 0===e?e=0:e>a?e=a:e<0&&(e=Math.max(0,a+e)),t=1===arguments.length?a-e:null==t?0:Math.max(0,Math.min(t,a-e)),void 0===n&&(n=c),Un(this)){var i=Bn(this,{object:this.proxy_,type:Qn,index:e,removedCount:t,added:n});if(!i)return c;t=i.removedCount,n=i.added}if(n=0===n.length?n:n.map((function(e){return r.enhancer_(e,void 0)})),this.legacyMode_){var o=n.length-t;this.updateArrayLength_(a,o)}var l=this.spliceItemsIntoValues_(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice_(e,n,l),this.dehanceValues_(l)},t.spliceItemsIntoValues_=function(e,t,n){var r;if(n.length<1e4)return(r=this.values_).splice.apply(r,[e,t].concat(n));var a=this.values_.slice(e,e+t),i=this.values_.slice(e+t);this.values_.length+=n.length-t;for(var o=0;o<n.length;o++)this.values_[e+o]=n[o];for(var l=0;l<i.length;l++)this.values_[e+n.length+l]=i[l];return a},t.notifyArrayChildUpdate_=function(e,t,n){var r=!this.owned_&&!1,a=Hn(this),i=a||r?{observableKind:"array",object:this.proxy_,type:Yn,debugObjectName:this.atom_.name_,index:e,newValue:t,oldValue:n}:null;this.atom_.reportChanged(),a&&Gn(this,i)},t.notifyArraySplice_=function(e,t,n){var r=!this.owned_&&!1,a=Hn(this),i=a||r?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:Qn,index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;this.atom_.reportChanged(),a&&Gn(this,i)},t.get_=function(e){if(e<this.values_.length)return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx.array] Attempt to read an array index ("+e+") that is out of bounds ("+this.values_.length+"). Please check length first. Out of bound indices will not be tracked by MobX")},t.set_=function(e,t){var n=this.values_;if(e<n.length){this.atom_;var a=n[e];if(Un(this)){var i=Bn(this,{type:Yn,object:this.proxy_,index:e,newValue:t});if(!i)return;t=i.newValue}(t=this.enhancer_(t,a))!==a&&(n[e]=t,this.notifyArrayChildUpdate_(e,t,a))}else e===n.length?this.spliceWithArray_(e,0,[t]):r(17,e,n.length)},e}();function Zn(e,t,n,r){void 0===n&&(n="ObservableArray"),void 0===r&&(r=!1),p();var a=new Jn(n,t,r,!1);k(a.values_,H,a);var i=new Proxy(a.values_,Xn);if(a.proxy_=i,e&&e.length){var o=Be(!0);a.spliceWithArray_(0,0,e),He(o)}return i}var er={clear:function(){return this.splice(0)},replace:function(e){var t=this[H];return t.spliceWithArray_(0,t.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),a=2;a<n;a++)r[a-2]=arguments[a];var i=this[H];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray_(e);case 2:return i.spliceWithArray_(e,t)}return i.spliceWithArray_(e,t,r)},spliceWithArray:function(e,t,n){return this[H].spliceWithArray_(e,t,n)},push:function(){for(var e=this[H],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(e.values_.length,0,n),e.values_.length},pop:function(){return this.splice(Math.max(this[H].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[H],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(0,0,n),e.values_.length},reverse:function(){return dt.trackingDerivation&&r(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){dt.trackingDerivation&&r(37,"sort");var e=this.slice();return e.sort.apply(e,arguments),this.replace(e),this},remove:function(e){var t=this[H],n=t.dehanceValues_(t.values_).indexOf(e);return n>-1&&(this.splice(n,1),!0)}};function tr(e,t){"function"==typeof Array.prototype[e]&&(er[e]=t(e))}function nr(e){return function(){var t=this[H];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_);return n[e].apply(n,arguments)}}function rr(e){return function(t,n){var r=this,a=this[H];return a.atom_.reportObserved(),a.dehanceValues_(a.values_)[e]((function(e,a){return t.call(n,e,a,r)}))}}function ar(e){return function(){var t=this,n=this[H];n.atom_.reportObserved();var r=n.dehanceValues_(n.values_),a=arguments[0];return arguments[0]=function(e,n,r){return a(e,n,r,t)},r[e].apply(r,arguments)}}tr("concat",nr),tr("flat",nr),tr("includes",nr),tr("indexOf",nr),tr("join",nr),tr("lastIndexOf",nr),tr("slice",nr),tr("toString",nr),tr("toLocaleString",nr),tr("every",rr),tr("filter",rr),tr("find",rr),tr("findIndex",rr),tr("flatMap",rr),tr("forEach",rr),tr("map",rr),tr("some",rr),tr("reduce",ar),tr("reduceRight",ar);var ir=E("ObservableArrayAdministration",Jn);function or(e){return b(e)&&ir(e[H])}var lr={},ur="add",sr="delete",cr=function(e,t){function n(e,t,n){var a=this;void 0===t&&(t=K),void 0===n&&(n="ObservableMap"),this.enhancer_=void 0,this.name_=void 0,this[H]=lr,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,g(Map)||r(18),this.keysAtom_=$("ObservableMap.keys()"),this.data_=new Map,this.hasMap_=new Map,Ve(!0,(function(){a.merge(e)}))}var a=n.prototype;return a.has_=function(e){return this.data_.has(e)},a.has=function(e){var t=this;if(!dt.trackingDerivation)return this.has_(e);var n=this.hasMap_.get(e);if(!n){var r=n=new $e(this.has_(e),Q,"ObservableMap.key?",!1);this.hasMap_.set(e,r),$t(r,(function(){return t.hasMap_.delete(e)}))}return n.get()},a.set=function(e,t){var n=this.has_(e);if(Un(this)){var r=Bn(this,{type:n?Yn:ur,object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this.updateValue_(e,t):this.addValue_(e,t),this},a.delete=function(e){var t=this;if(this.keysAtom_,Un(this)&&!Bn(this,{type:sr,object:this,name:e}))return!1;if(this.has_(e)){var n=Hn(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:sr,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return Mn((function(){var n;t.keysAtom_.reportChanged(),null==(n=t.hasMap_.get(e))||n.setNewValue_(!1),t.data_.get(e).setNewValue_(void 0),t.data_.delete(e)})),n&&Gn(this,r),!0}return!1},a.updateValue_=function(e,t){var n=this.data_.get(e);if((t=n.prepareNewValue_(t))!==dt.UNCHANGED){var r=Hn(this),a=r?{observableKind:"map",debugObjectName:this.name_,type:Yn,object:this,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),r&&Gn(this,a)}},a.addValue_=function(e,t){var n=this;this.keysAtom_,Mn((function(){var r,a=new $e(t,n.enhancer_,"ObservableMap.key",!1);n.data_.set(e,a),t=a.value_,null==(r=n.hasMap_.get(e))||r.setNewValue_(!0),n.keysAtom_.reportChanged()}));var r=Hn(this),a=r?{observableKind:"map",debugObjectName:this.name_,type:ur,object:this,name:e,newValue:t}:null;r&&Gn(this,a)},a.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},a.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},a.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},a.values=function(){var e=this,t=this.keys();return Ir({next:function(){var n=t.next(),r=n.done,a=n.value;return{done:r,value:r?void 0:e.get(a)}}})},a.entries=function(){var e=this,t=this.keys();return Ir({next:function(){var n=t.next(),r=n.done,a=n.value;return{done:r,value:r?void 0:[a,e.get(a)]}}})},a[e]=function(){return this.entries()},a.forEach=function(e,t){for(var n,r=F(this);!(n=r()).done;){var a=n.value,i=a[0],o=a[1];e.call(t,o,i,this)}},a.merge=function(e){var t=this;return fr(e)&&(e=new Map(e)),Mn((function(){_(e)?function(e){var t=Object.keys(e);if(!T)return t;var n=Object.getOwnPropertySymbols(e);return n.length?[].concat(t,n.filter((function(t){return s.propertyIsEnumerable.call(e,t)}))):t}(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];return t.set(n,r)})):O(e)?(e.constructor!==Map&&r(19,e),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&r(20,e)})),this},a.clear=function(){var e=this;Mn((function(){nt((function(){for(var t,n=F(e.keys());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},a.replace=function(e){var t=this;return Mn((function(){for(var n,a=function(e){if(O(e)||fr(e))return e;if(Array.isArray(e))return new Map(e);if(_(e)){var t=new Map;for(var n in e)t.set(n,e[n]);return t}return r(21,e)}(e),i=new Map,o=!1,l=F(t.data_.keys());!(n=l()).done;){var u=n.value;if(!a.has(u))if(t.delete(u))o=!0;else{var s=t.data_.get(u);i.set(u,s)}}for(var c,f=F(a.entries());!(c=f()).done;){var d=c.value,h=d[0],p=d[1],v=t.data_.has(h);if(t.set(h,p),t.data_.has(h)){var m=t.data_.get(h);i.set(h,m),v||(o=!0)}}if(!o)if(t.data_.size!==i.size)t.keysAtom_.reportChanged();else for(var g=t.data_.keys(),y=i.keys(),b=g.next(),w=y.next();!b.done;){if(b.value!==w.value){t.keysAtom_.reportChanged();break}b=g.next(),w=y.next()}t.data_=i})),this},a.toString=function(){return"[object ObservableMap]"},a.toJSON=function(){return Array.from(this)},a.observe_=function(e,t){return Wn(this,e)},a.intercept_=function(e){return Vn(this,e)},L(n,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:t,get:function(){return"Map"}}]),n}(Symbol.iterator,Symbol.toStringTag),fr=E("ObservableMap",cr),dr={},hr=function(e,t){function n(e,t,n){void 0===t&&(t=K),void 0===n&&(n="ObservableSet"),this.name_=void 0,this[H]=dr,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,g(Set)||r(22),this.atom_=$(this.name_),this.enhancer_=function(e,r){return t(e,r,n)},e&&this.replace(e)}var a=n.prototype;return a.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},a.clear=function(){var e=this;Mn((function(){nt((function(){for(var t,n=F(e.data_.values());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},a.forEach=function(e,t){for(var n,r=F(this);!(n=r()).done;){var a=n.value;e.call(t,a,a,this)}},a.add=function(e){var t=this;if(this.atom_,Un(this)&&!Bn(this,{type:ur,object:this,newValue:e}))return this;if(!this.has(e)){Mn((function(){t.data_.add(t.enhancer_(e,void 0)),t.atom_.reportChanged()}));var n=Hn(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:ur,object:this,newValue:e}:null;n&&Gn(this,r)}return this},a.delete=function(e){var t=this;if(Un(this)&&!Bn(this,{type:sr,object:this,oldValue:e}))return!1;if(this.has(e)){var n=Hn(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:sr,object:this,oldValue:e}:null;return Mn((function(){t.atom_.reportChanged(),t.data_.delete(e)})),n&&Gn(this,r),!0}return!1},a.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},a.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return Ir({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},a.keys=function(){return this.values()},a.values=function(){this.atom_.reportObserved();var e=this,t=0,n=Array.from(this.data_.values());return Ir({next:function(){return t<n.length?{value:e.dehanceValue_(n[t++]),done:!1}:{done:!0}}})},a.replace=function(e){var t=this;return pr(e)&&(e=new Set(e)),Mn((function(){Array.isArray(e)||x(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&r("Cannot initialize set from "+e)})),this},a.observe_=function(e,t){return Wn(this,e)},a.intercept_=function(e){return Vn(this,e)},a.toJSON=function(){return Array.from(this)},a.toString=function(){return"[object ObservableSet]"},a[e]=function(){return this.values()},L(n,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:t,get:function(){return"Set"}}]),n}(Symbol.iterator,Symbol.toStringTag),pr=E("ObservableSet",hr),vr=Object.create(null),mr="remove",gr=function(){function e(e,t,n,r){void 0===t&&(t=new Map),void 0===r&&(r=de),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=t,this.name_=n,this.defaultAnnotation_=r,this.keysAtom_=new W("ObservableObject.keys"),this.isPlainObject_=_(this.target_)}var t=e.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,t){var n=this.values_.get(e);if(n instanceof Ke)return n.set(t),!0;if(Un(this)){var r=Bn(this,{type:Yn,object:this.proxy_||this.target_,name:e,newValue:t});if(!r)return null;t=r.newValue}if((t=n.prepareNewValue_(t))!==dt.UNCHANGED){var a=Hn(this),i=a?{type:Yn,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),a&&Gn(this,i)}return!0},t.get_=function(e){return dt.trackingDerivation&&!N(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,t,n){return void 0===n&&(n=!1),N(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,t):n?Reflect.set(this.target_,e,t):(this.target_[e]=t,!0):this.extend_(e,{value:t,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,n)},t.has_=function(e){if(!dt.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var t=this.pendingKeys_.get(e);return t||(t=new $e(e in this.target_,Q,"ObservableObject.key?",!1),this.pendingKeys_.set(e,t)),t.get()},t.make_=function(e,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(!(e in this.target_)){var n;if(null!=(n=this.target_[U])&&n[e])return;r(1,t.annotationType_,this.name_+"."+e.toString())}for(var a=this.target_;a&&a!==s;){var i=l(a,e);if(i){var o=t.make_(this,e,i,a);if(0===o)return;if(1===o)break}a=Object.getPrototypeOf(a)}Sr(this,0,e)}},t.extend_=function(e,t,n,r){if(void 0===r&&(r=!1),!0===n&&(n=this.defaultAnnotation_),!1===n)return this.defineProperty_(e,t,r);var a=n.extend_(this,e,t,r);return a&&Sr(this,0,e),a},t.defineProperty_=function(e,t,n){void 0===n&&(n=!1);try{yt();var r=this.delete_(e);if(!r)return r;if(Un(this)){var a=Bn(this,{object:this.proxy_||this.target_,name:e,type:ur,newValue:t.value});if(!a)return null;var i=a.newValue;t.value!==i&&(t=M({},t,{value:i}))}if(n){if(!Reflect.defineProperty(this.target_,e,t))return!1}else u(this.target_,e,t);this.notifyPropertyAddition_(e,t.value)}finally{bt()}return!0},t.defineObservableProperty_=function(e,t,n,r){void 0===r&&(r=!1);try{yt();var a=this.delete_(e);if(!a)return a;if(Un(this)){var i=Bn(this,{object:this.proxy_||this.target_,name:e,type:ur,newValue:t});if(!i)return null;t=i.newValue}var o=_r(e),l={configurable:!dt.safeDescriptors||this.isPlainObject_,enumerable:!0,get:o.get,set:o.set};if(r){if(!Reflect.defineProperty(this.target_,e,l))return!1}else u(this.target_,e,l);var s=new $e(t,n,"ObservableObject.key",!1);this.values_.set(e,s),this.notifyPropertyAddition_(e,s.value_)}finally{bt()}return!0},t.defineComputedProperty_=function(e,t,n){void 0===n&&(n=!1);try{yt();var r=this.delete_(e);if(!r)return r;if(Un(this)&&!Bn(this,{object:this.proxy_||this.target_,name:e,type:ur,newValue:void 0}))return null;t.name||(t.name="ObservableObject.key"),t.context=this.proxy_||this.target_;var a=_r(e),i={configurable:!dt.safeDescriptors||this.isPlainObject_,enumerable:!1,get:a.get,set:a.set};if(n){if(!Reflect.defineProperty(this.target_,e,i))return!1}else u(this.target_,e,i);this.values_.set(e,new Ke(t)),this.notifyPropertyAddition_(e,void 0)}finally{bt()}return!0},t.delete_=function(e,t){if(void 0===t&&(t=!1),!N(this.target_,e))return!0;if(Un(this)&&!Bn(this,{object:this.proxy_||this.target_,name:e,type:mr}))return null;try{var n,r;yt();var a,i=Hn(this),o=this.values_.get(e),u=void 0;if(!o&&i&&(u=null==(a=l(this.target_,e))?void 0:a.value),t){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(o&&(this.values_.delete(e),o instanceof $e&&(u=o.value_),wt(o)),this.keysAtom_.reportChanged(),null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(e in this.target_),i){var s={type:mr,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:u,name:e};i&&Gn(this,s)}}finally{bt()}return!0},t.observe_=function(e,t){return Wn(this,e)},t.intercept_=function(e){return Vn(this,e)},t.notifyPropertyAddition_=function(e,t){var n,r,a=Hn(this);if(a){var i=a?{type:ur,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:t}:null;a&&Gn(this,i)}null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),C(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},e}();function yr(e,t){var n;if(N(e,H))return e;var r=null!=(n=null==t?void 0:t.name)?n:"ObservableObject",a=new gr(e,new Map,String(r),function(e){var t;return e?null!=(t=e.defaultDecorator)?t:he(e):void 0}(t));return S(e,H,a),e}var br=E("ObservableObjectAdministration",gr);function _r(e){return vr[e]||(vr[e]={get:function(){return this[H].getObservablePropValue_(e)},set:function(t){return this[H].setObservablePropValue_(e,t)}})}function wr(e){return!!b(e)&&br(e[H])}function Sr(e,t,n){var r;null==(r=e.target_[U])||delete r[n]}var kr,Er,Or=0,xr=function(){};kr=xr,Er=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(kr.prototype,Er):void 0!==kr.prototype.__proto__?kr.prototype.__proto__=Er:kr.prototype=Er;var Tr=function(e,t,n){function r(t,n,r,a){var i;void 0===r&&(r="ObservableArray"),void 0===a&&(a=!1),i=e.call(this)||this;var o=new Jn(r,n,a,!0);if(o.proxy_=j(i),k(j(i),H,o),t&&t.length){var l=Be(!0);i.spliceWithArray(0,0,t),He(l)}return i}z(r,e);var a=r.prototype;return a.concat=function(){this[H].atom_.reportObserved();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Array.prototype.concat.apply(this.slice(),t.map((function(e){return or(e)?e.slice():e})))},a[n]=function(){var e=this,t=0;return Ir({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})},L(r,[{key:"length",get:function(){return this[H].getArrayLength_()},set:function(e){this[H].setArrayLength_(e)}},{key:t,get:function(){return"Array"}}]),r}(xr,Symbol.toStringTag,Symbol.iterator);function Cr(e){u(Tr.prototype,""+e,function(e){return{enumerable:!1,configurable:!0,get:function(){return this[H].get_(e)},set:function(t){this[H].set_(e,t)}}}(e))}function Pr(e){if(e>Or){for(var t=Or;t<e+100;t++)Cr(t);Or=e}}function Nr(e,t,n){return new Tr(e,t,n)}function Rr(e,t){if("object"==typeof e&&null!==e){if(or(e))return void 0!==t&&r(23),e[H].atom_;if(pr(e))return e[H];if(fr(e)){if(void 0===t)return e.keysAtom_;var n=e.data_.get(t)||e.hasMap_.get(t);return n||r(25,t,Lr(e)),n}if(wr(e)){if(!t)return r(26);var a=e[H].values_.get(t);return a||r(27,t,Lr(e)),a}if(G(e)||Qe(e)||Tt(e))return e}else if(g(e)&&Tt(e[H]))return e[H];r(28)}function Ar(e,t){return e||r(29),void 0!==t?Ar(Rr(e,t)):G(e)||Qe(e)||Tt(e)||fr(e)||pr(e)?e:e[H]?e[H]:void r(24,e)}function Lr(e,t){var n;if(void 0!==t)n=Rr(e,t);else{if(Ut(e))return e.name;n=wr(e)||fr(e)||pr(e)?Ar(e):Rr(e)}return n.name_}Object.entries(er).forEach((function(e){var t=e[0],n=e[1];"concat"!==t&&S(Tr.prototype,t,n)})),Pr(1e3);var Mr=s.toString;function zr(e,t,n){return void 0===n&&(n=-1),Dr(e,t,n)}function Dr(e,t,n,r,a){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=typeof e;if("function"!==i&&"object"!==i&&"object"!=typeof t)return!1;var o=Mr.call(e);if(o!==Mr.call(t))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t);case"[object Map]":case"[object Set]":n>=0&&n++}e=jr(e),t=jr(t);var l="[object Array]"===o;if(!l){if("object"!=typeof e||"object"!=typeof t)return!1;var u=e.constructor,s=t.constructor;if(u!==s&&!(g(u)&&u instanceof u&&g(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}if(0===n)return!1;n<0&&(n=-1),a=a||[];for(var c=(r=r||[]).length;c--;)if(r[c]===e)return a[c]===t;if(r.push(e),a.push(t),l){if((c=e.length)!==t.length)return!1;for(;c--;)if(!Dr(e[c],t[c],n-1,r,a))return!1}else{var f,d=Object.keys(e);if(c=d.length,Object.keys(t).length!==c)return!1;for(;c--;)if(!N(t,f=d[c])||!Dr(e[f],t[f],n-1,r,a))return!1}return r.pop(),a.pop(),!0}function jr(e){return or(e)?e.slice():O(e)||fr(e)||x(e)||pr(e)?Array.from(e.entries()):e}function Ir(e){return e[Symbol.iterator]=Fr,e}function Fr(){return this}["Symbol","Map","Set"].forEach((function(e){void 0===i()[e]&&r("MobX requires global '"+e+"' to be available or polyfilled")})),"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:Ct,extras:{getDebugName:Lr},$mobx:H})},448:(e,t,n)=>{var r=n(294),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function v(e,t,n,r,a,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(p,e)||!f.call(h,e)&&(d.test(e)?p[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),O=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),T=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var L=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function z(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var D,j=Object.assign;function I(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function U(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),i=r.stack.split("\n"),o=a.length-1,l=i.length-1;1<=o&&0<=l&&a[o]!==i[l];)l--;for(;1<=o&&0<=l;o--,l--)if(a[o]!==i[l]){if(1!==o||1!==l)do{if(o--,0>--l||a[o]!==i[l]){var u="\n"+a[o].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=o&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?I(e):""}function V(e){switch(e.tag){case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case O:return"Profiler";case E:return"StrictMode";case P:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ie(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ve(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(he).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ge=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,Ee=null;function Oe(e){if(e=ba(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=wa(t),Se(e.stateNode,e.type,t))}}function xe(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Te(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ce(e,t){return e(t)}function Pe(){}var Ne=!1;function Re(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Ce(e,t,n)}finally{Ne=!1,(null!==ke||null!==Ee)&&(Pe(),Te())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=wa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Le=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Le=!1}function ze(e,t,n,r,a,i,o,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,je=null,Ie=!1,Fe=null,Ue={onError:function(e){De=!0,je=e}};function Ve(e,t,n,r,a,i,o,l,u){De=!1,je=null,ze.apply(Ue,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Be(e)!==e)throw Error(i(188))}function Ge(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return We(a),e;if(o===r)return We(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,it=null,ot=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,i=e.pingedLanes,o=268435455&n;if(0!==o){var l=o&~a;0!==l?r=ft(l):0!=(i&=o)&&(r=ft(i))}else 0!=(o=n&~a)?r=ft(o):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(i=t&-t)||16===a&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-ot(t)),r|=e[n],t&=~a;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function _t(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,St,kt,Et,Ot,xt=!1,Tt=[],Ct=null,Pt=null,Nt=null,Rt=new Map,At=new Map,Lt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function zt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function Dt(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ot(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);_e=r,n.target.dispatchEvent(r),_e=null,t.shift()}return!0}function Ft(e,t,n){It(e)&&n.delete(t)}function Ut(){xt=!1,null!==Ct&&It(Ct)&&(Ct=null),null!==Pt&&It(Pt)&&(Pt=null),null!==Nt&&It(Nt)&&(Nt=null),Rt.forEach(Ft),At.forEach(Ft)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Ut)))}function Bt(e){function t(t){return Vt(t,e)}if(0<Tt.length){Vt(Tt[0],e);for(var n=1;n<Tt.length;n++){var r=Tt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Vt(Ct,e),null!==Pt&&Vt(Pt,e),null!==Nt&&Vt(Nt,e),Rt.forEach(t),At.forEach(t),n=0;n<Lt.length;n++)(r=Lt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Lt.length&&null===(n=Lt[0]).blockedOn;)jt(n),null===n.blockedOn&&Lt.shift()}var Ht=_.ReactCurrentBatchConfig,Wt=!0;function Gt(e,t,n,r){var a=bt,i=Ht.transition;Ht.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=a,Ht.transition=i}}function $t(e,t,n,r){var a=bt,i=Ht.transition;Ht.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=a,Ht.transition=i}}function qt(e,t,n,r){if(Wt){var a=Qt(e,t,n,r);if(null===a)Wr(e,t,r,Kt,n),zt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Ct=Dt(Ct,e,t,n,r,a),!0;case"dragenter":return Pt=Dt(Pt,e,t,n,r,a),!0;case"mouseover":return Nt=Dt(Nt,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return Rt.set(i,Dt(Rt.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,At.set(i,Dt(At.get(i)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(zt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==a;){var i=ba(a);if(null!==i&&wt(i),null===(i=Qt(e,t,n,r))&&Wr(e,t,r,Kt,n),i===a)break;a=i}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Kt=null;function Qt(e,t,n,r){if(Kt=null,null!==(e=ya(e=we(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[i-t];t++);return Zt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,i){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=j({},sn,{view:0,detail:0}),dn=an(fn),hn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),pn=an(hn),vn=an(j({},hn,{dataTransfer:0})),mn=an(j({},fn,{relatedTarget:0})),gn=an(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),_n=an(j({},sn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function On(){return En}var xn=j({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=an(xn),Cn=an(j({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Nn=an(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=j({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=an(Rn),Ln=[9,13,27,32],Mn=c&&"CompositionEvent"in window,zn=null;c&&"documentMode"in document&&(zn=document.documentMode);var Dn=c&&"TextEvent"in window&&!zn,jn=c&&(!Mn||zn&&8<zn&&11>=zn),In=String.fromCharCode(32),Fn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Gn(e,t,n,r){xe(r),0<(t=$r(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Kn(e){Ir(e,0)}function Qn(e){if(q(_a(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){$n&&($n.detachEvent("onpropertychange",nr),qn=$n=null)}function nr(e){if("value"===e.propertyName&&Qn(qn)){var t=[];Gn(t,qn,e,we(e)),Re(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,($n=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(qn)}function ir(e,t){if("click"===e)return Qn(t)}function or(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,i=Math.min(r.start,a);r=void 0===r.end?i:Math.min(r.end,a),!e.extend&&i>r&&(a=r,r=i,i=a),a=cr(n,i);var o=cr(n,r);a&&o&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var vr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,yr=null,br=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==K(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=$r(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},kr={},Er={};function Or(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var xr=Or("animationend"),Tr=Or("animationiteration"),Cr=Or("animationstart"),Pr=Or("transitionend"),Nr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,t){Nr.set(e,t),u(t,[e])}for(var Lr=0;Lr<Rr.length;Lr++){var Mr=Rr[Lr];Ar(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Ar(xr,"onAnimationEnd"),Ar(Tr,"onAnimationIteration"),Ar(Cr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(Pr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,u,s){if(Ve.apply(this,arguments),De){if(!De)throw Error(i(198));var c=je;De=!1,je=null,Ie||(Ie=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ir(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&a.isPropagationStopped())break e;jr(a,l,s),i=u}else for(o=0;o<r.length;o++){if(u=(l=r[o]).instance,s=l.currentTarget,l=l.listener,u!==i&&a.isPropagationStopped())break e;jr(a,l,s),i=u}}}if(Ie)throw e=Fe,Ie=!1,Fe=null,e}function Fr(e,t){var n=t[va];void 0===n&&(n=t[va]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[Vr]){e[Vr]=!0,o.forEach((function(t){"selectionchange"!==t&&(Dr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,Ur("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Yt(t)){case 1:var a=Gt;break;case 4:a=$t;break;default:a=qt}n=a.bind(null,t,n,e),a=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==l;){if(null===(o=ya(l)))return;if(5===(u=o.tag)||6===u){r=i=o;continue e}l=l.parentNode}}r=r.return}Re((function(){var r=i,a=we(n),o=[];e:{var l=Nr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=mn;break;case"focusout":s="blur",u=mn;break;case"beforeblur":case"afterblur":u=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case xr:case Tr:case Cr:u=gn;break;case Pr:u=Nn;break;case"scroll":u=dn;break;case"wheel":u=An;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Cn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var h,p=r;null!==p;){var v=(h=p).stateNode;if(5===h.tag&&null!==v&&(h=v,null!==d&&null!=(v=Ae(p,d))&&c.push(Gr(p,v,h))),f)break;p=p.return}0<c.length&&(l=new u(l,s,null,n,a),o.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===_e||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[pa])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(f=Be(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=pn,v="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=Cn,v="onPointerLeave",d="onPointerEnter",p="pointer"),f=null==u?l:_a(u),h=null==s?l:_a(s),(l=new c(v,p+"leave",u,n,a)).target=f,l.relatedTarget=h,v=null,ya(a)===r&&((c=new c(d,p+"enter",s,n,a)).target=h,c.relatedTarget=f,v=c),f=v,u&&s)e:{for(d=s,p=0,h=c=u;h;h=qr(h))p++;for(h=0,v=d;v;v=qr(v))h++;for(;0<p-h;)c=qr(c),p--;for(;0<h-p;)d=qr(d),h--;for(;p--;){if(c===d||null!==d&&c===d.alternate)break e;c=qr(c),d=qr(d)}c=null}else c=null;null!==u&&Kr(o,l,u,c,!1),null!==s&&null!==f&&Kr(o,f,s,c,!0)}if("select"===(u=(l=r?_a(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var m=Yn;else if(Wn(l))if(Xn)m=or;else{m=ar;var g=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=ir);switch(m&&(m=m(e,r))?Gn(o,m,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?_a(r):window,e){case"focusin":(Wn(g)||"true"===g.contentEditable)&&(mr=g,gr=r,yr=null);break;case"focusout":yr=gr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,_r(o,n,a);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":_r(o,n,a)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=en()):(Jt="value"in(Xt=a)?Xt.value:Xt.textContent,Bn=!0)),0<(g=$r(r,b)).length&&(b=new _n(b,e,null,n,a),o.push({event:b,listeners:g}),(y||null!==(y=Vn(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(Fn=!0,In);case"textInput":return(e=t.data)===In&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Mn&&Un(e,t)?(e=en(),Zt=Jt=Xt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(a=new _n("onBeforeInput","beforeinput",null,n,a),o.push({event:a,listeners:r}),a.data=y)}Ir(o,t)}))}function Gr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Ae(e,n))&&r.unshift(Gr(e,i,a)),null!=(i=Ae(e,t))&&r.push(Gr(e,i,a))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,a){for(var i=t._reactName,o=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Ae(n,i))&&o.unshift(Gr(n,u,l)):a||null!=(u=Ae(n,i))&&o.push(Gr(n,u,l))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Qr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Zr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,ia="function"==typeof Promise?Promise:void 0,oa="function"==typeof queueMicrotask?queueMicrotask:void 0!==ia?function(e){return ia.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Bt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,ha="__reactProps$"+fa,pa="__reactContainer$"+fa,va="__reactEvents$"+fa,ma="__reactListeners$"+fa,ga="__reactHandles$"+fa;function ya(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pa]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[pa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function _a(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function wa(e){return e[ha]||null}var Sa=[],ka=-1;function Ea(e){return{current:e}}function Oa(e){0>ka||(e.current=Sa[ka],Sa[ka]=null,ka--)}function xa(e,t){ka++,Sa[ka]=e.current,e.current=t}var Ta={},Ca=Ea(Ta),Pa=Ea(!1),Na=Ta;function Ra(e,t){var n=e.type.contextTypes;if(!n)return Ta;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Aa(e){return null!=e.childContextTypes}function La(){Oa(Pa),Oa(Ca)}function Ma(e,t,n){if(Ca.current!==Ta)throw Error(i(168));xa(Ca,t),xa(Pa,n)}function za(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(i(108,H(e)||"Unknown",a));return j({},n,r)}function Da(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ta,Na=Ca.current,xa(Ca,e),xa(Pa,Pa.current),!0}function ja(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=za(e,t,Na),r.__reactInternalMemoizedMergedChildContext=e,Oa(Pa),Oa(Ca),xa(Ca,e)):Oa(Pa),xa(Pa,n)}var Ia=null,Fa=!1,Ua=!1;function Va(e){null===Ia?Ia=[e]:Ia.push(e)}function Ba(){if(!Ua&&null!==Ia){Ua=!0;var e=0,t=bt;try{var n=Ia;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ia=null,Fa=!1}catch(t){throw null!==Ia&&(Ia=Ia.slice(e+1)),qe(Ze,Ba),t}finally{bt=t,Ua=!1}}return null}var Ha=_.ReactCurrentBatchConfig;function Wa(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ga=Ea(null),$a=null,qa=null,Ka=null;function Qa(){Ka=qa=$a=null}function Ya(e){var t=Ga.current;Oa(Ga),e._currentValue=t}function Xa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ja(e,t){$a=e,Ka=qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Za(e){var t=e._currentValue;if(Ka!==e)if(e={context:e,memoizedValue:t,next:null},null===qa){if(null===$a)throw Error(i(308));qa=e,$a.dependencies={lanes:0,firstContext:e}}else qa=qa.next=e;return t}var ei=null,ti=!1;function ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ri(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ai(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ii(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,ts(e)?(null===(e=n.interleaved)?(t.next=t,null===ei?ei=[n]:ei.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=o:i=i.next=o,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ui(e,t,n,r){var a=e.updateQueue;ti=!1;var i=a.firstBaseUpdate,o=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===o?i=s:o.next=s,o=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==i){var f=a.baseState;for(o=0,c=s=u=null,l=i;;){var d=l.lane,h=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:h,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var p=e,v=l;switch(d=t,h=n,v.tag){case 1:if("function"==typeof(p=v.payload)){f=p.call(h,f,d);break e}f=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(d="function"==typeof(p=v.payload)?p.call(h,f,d):p))break e;f=j({},f,d);break e;case 2:ti=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else h={eventTime:h,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=h,u=f):c=c.next=h,o|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{o|=a.lane,a=a.next}while(a!==t)}else null===i&&(a.shared.lanes=0);Lu|=o,e.lanes=o,e.memoizedState=f}}function si(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var ci=(new r.Component).refs;function fi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var di={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Ju(e),i=ai(r,a);i.payload=t,null!=n&&(i.callback=n),ii(e,i),null!==(t=Zu(e,a,r))&&oi(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Ju(e),i=ai(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ii(e,i),null!==(t=Zu(e,a,r))&&oi(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Xu(),r=Ju(e),a=ai(n,r);a.tag=2,null!=t&&(a.callback=t),ii(e,a),null!==(t=Zu(e,r,n))&&oi(t,e,r)}};function hi(e,t,n,r,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,o):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,i))}function pi(e,t,n){var r=!1,a=Ta,i=t.contextType;return"object"==typeof i&&null!==i?i=Za(i):(a=Aa(t)?Na:Ca.current,i=(r=null!=(r=t.contextTypes))?Ra(e,a):Ta),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=di,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&di.enqueueReplaceState(t,t.state,null)}function mi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ci,ni(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=Za(i):(i=Aa(t)?Na:Ca.current,a.context=Ra(e,i)),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(fi(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&di.enqueueReplaceState(a,a.state,null),ui(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var gi=[],yi=0,bi=null,_i=0,wi=[],Si=0,ki=null,Ei=1,Oi="";function xi(e,t){gi[yi++]=_i,gi[yi++]=bi,bi=e,_i=t}function Ti(e,t,n){wi[Si++]=Ei,wi[Si++]=Oi,wi[Si++]=ki,ki=e;var r=Ei;e=Oi;var a=32-ot(r)-1;r&=~(1<<a),n+=1;var i=32-ot(t)+a;if(30<i){var o=a-a%5;i=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Ei=1<<32-ot(t)+a|n<<a|r,Oi=i+e}else Ei=1<<i|n<<a|r,Oi=e}function Ci(e){null!==e.return&&(xi(e,1),Ti(e,1,0))}function Pi(e){for(;e===bi;)bi=gi[--yi],gi[yi]=null,_i=gi[--yi],gi[yi]=null;for(;e===ki;)ki=wi[--Si],wi[Si]=null,Oi=wi[--Si],wi[Si]=null,Ei=wi[--Si],wi[Si]=null}var Ni=null,Ri=null,Ai=!1,Li=null;function Mi(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function zi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Ni=e,Ri=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Ni=e,Ri=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==ki?{id:Ei,overflow:Oi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Ni=e,Ri=null,!0);default:return!1}}function Di(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ji(e){if(Ai){var t=Ri;if(t){var n=t;if(!zi(e,t)){if(Di(e))throw Error(i(418));t=sa(n.nextSibling);var r=Ni;t&&zi(e,t)?Mi(r,n):(e.flags=-4097&e.flags|2,Ai=!1,Ni=e)}}else{if(Di(e))throw Error(i(418));e.flags=-4097&e.flags|2,Ai=!1,Ni=e}}}function Ii(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ni=e}function Fi(e){if(e!==Ni)return!1;if(!Ai)return Ii(e),Ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=Ri)){if(Di(e)){for(e=Ri;e;)e=sa(e.nextSibling);throw Error(i(418))}for(;t;)Mi(e,t),t=sa(t.nextSibling)}if(Ii(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ri=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ri=null}}else Ri=Ni?sa(e.stateNode.nextSibling):null;return!0}function Ui(){Ri=Ni=null,Ai=!1}function Vi(e){null===Li?Li=[e]:Li.push(e)}function Bi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=a.refs;t===ci&&(t=a.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Hi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Wi(e){return(0,e._init)(e._payload)}function Gi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=As(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ds(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===A&&Wi(i)===t.type)?((r=a(t,n.props)).ref=Bi(e,t,n),r.return=e,r):((r=Ls(n.type,n.key,n.props,null,e.mode,r)).ref=Bi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=js(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ds(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ls(t.type,t.key,t.props,null,e.mode,n)).ref=Bi(e,null,t),n.return=e,n;case S:return(t=js(t,e.mode,n)).return=e,t;case A:return d(e,(0,t._init)(t._payload),n)}if(te(t)||z(t))return(t=Ms(t,e.mode,n,null)).return=e,t;Hi(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?s(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case A:return h(e,t,(a=n._init)(n._payload),r)}if(te(n)||z(n))return null!==a?null:f(e,t,n,r,null);Hi(e,n)}return null}function p(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case A:return p(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||z(r))return f(t,e=e.get(n)||null,r,a,null);Hi(t,r)}return null}function v(a,i,l,u){for(var s=null,c=null,f=i,v=i=0,m=null;null!==f&&v<l.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=h(a,f,l[v],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(a,f),i=o(g,i,v),null===c?s=g:c.sibling=g,c=g,f=m}if(v===l.length)return n(a,f),Ai&&xi(a,v),s;if(null===f){for(;v<l.length;v++)null!==(f=d(a,l[v],u))&&(i=o(f,i,v),null===c?s=f:c.sibling=f,c=f);return Ai&&xi(a,v),s}for(f=r(a,f);v<l.length;v++)null!==(m=p(f,a,v,l[v],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),i=o(m,i,v),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(a,e)})),Ai&&xi(a,v),s}function m(a,l,u,s){var c=z(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,v=l,m=l=0,g=null,y=u.next();null!==v&&!y.done;m++,y=u.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=h(a,v,y.value,s);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(a,v),l=o(b,l,m),null===f?c=b:f.sibling=b,f=b,v=g}if(y.done)return n(a,v),Ai&&xi(a,m),c;if(null===v){for(;!y.done;m++,y=u.next())null!==(y=d(a,y.value,s))&&(l=o(y,l,m),null===f?c=y:f.sibling=y,f=y);return Ai&&xi(a,m),c}for(v=r(a,v);!y.done;m++,y=u.next())null!==(y=p(v,a,m,y.value,s))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),l=o(y,l,m),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(a,e)})),Ai&&xi(a,m),c}return function e(r,i,o,u){if("object"==typeof o&&null!==o&&o.type===k&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var s=o.key,c=i;null!==c;){if(c.key===s){if((s=o.type)===k){if(7===c.tag){n(r,c.sibling),(i=a(c,o.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===A&&Wi(s)===c.type){n(r,c.sibling),(i=a(c,o.props)).ref=Bi(r,c,o),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===k?((i=Ms(o.props.children,r.mode,u,o.key)).return=r,r=i):((u=Ls(o.type,o.key,o.props,null,r.mode,u)).ref=Bi(r,i,o),u.return=r,r=u)}return l(r);case S:e:{for(c=o.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(r,i.sibling),(i=a(i,o.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=js(o,r.mode,u)).return=r,r=i}return l(r);case A:return e(r,i,(c=o._init)(o._payload),u)}if(te(o))return v(r,i,o,u);if(z(o))return m(r,i,o,u);Hi(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==i&&6===i.tag?(n(r,i.sibling),(i=a(i,o)).return=r,r=i):(n(r,i),(i=Ds(o,r.mode,u)).return=r,r=i),l(r)):n(r,i)}}var $i=Gi(!0),qi=Gi(!1),Ki={},Qi=Ea(Ki),Yi=Ea(Ki),Xi=Ea(Ki);function Ji(e){if(e===Ki)throw Error(i(174));return e}function Zi(e,t){switch(xa(Xi,t),xa(Yi,e),xa(Qi,Ki),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oa(Qi),xa(Qi,t)}function eo(){Oa(Qi),Oa(Yi),Oa(Xi)}function to(e){Ji(Xi.current);var t=Ji(Qi.current),n=ue(t,e.type);t!==n&&(xa(Yi,e),xa(Qi,n))}function no(e){Yi.current===e&&(Oa(Qi),Oa(Yi))}var ro=Ea(0);function ao(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var io=[];function oo(){for(var e=0;e<io.length;e++)io[e]._workInProgressVersionPrimary=null;io.length=0}var lo=_.ReactCurrentDispatcher,uo=_.ReactCurrentBatchConfig,so=0,co=null,fo=null,ho=null,po=!1,vo=!1,mo=0,go=0;function yo(){throw Error(i(321))}function bo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function _o(e,t,n,r,a,o){if(so=o,co=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,lo.current=null===e||null===e.memoizedState?rl:al,e=n(r,a),vo){o=0;do{if(vo=!1,mo=0,25<=o)throw Error(i(301));o+=1,ho=fo=null,t.updateQueue=null,lo.current=il,e=n(r,a)}while(vo)}if(lo.current=nl,t=null!==fo&&null!==fo.next,so=0,ho=fo=co=null,po=!1,t)throw Error(i(300));return e}function wo(){var e=0!==mo;return mo=0,e}function So(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ho?co.memoizedState=ho=e:ho=ho.next=e,ho}function ko(){if(null===fo){var e=co.alternate;e=null!==e?e.memoizedState:null}else e=fo.next;var t=null===ho?co.memoizedState:ho.next;if(null!==t)ho=t,fo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(fo=e).memoizedState,baseState:fo.baseState,baseQueue:fo.baseQueue,queue:fo.queue,next:null},null===ho?co.memoizedState=ho=e:ho=ho.next=e}return ho}function Eo(e,t){return"function"==typeof t?t(e):t}function Oo(e){var t=ko(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=fo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){o=a.next,r=r.baseState;var u=l=null,s=null,c=o;do{var f=c.lane;if((so&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,co.lanes|=f,Lu|=f}c=c.next}while(null!==c&&c!==o);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{o=a.lane,co.lanes|=o,Lu|=o,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function xo(e){var t=ko(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);lr(o,t.memoizedState)||(wl=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function To(){}function Co(e,t){var n=co,r=ko(),a=t(),o=!lr(r.memoizedState,a);if(o&&(r.memoizedState=a,wl=!0),r=r.queue,Fo(Ro.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==ho&&1&ho.memoizedState.tag){if(n.flags|=2048,Mo(9,No.bind(null,n,r,a,t),void 0,null),null===xu)throw Error(i(349));0!=(30&so)||Po(n,t,a)}return a}function Po(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=co.updateQueue)?(t={lastEffect:null,stores:null},co.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function No(e,t,n,r){t.value=n,t.getSnapshot=r,Ao(t)&&Zu(e,1,-1)}function Ro(e,t,n){return n((function(){Ao(t)&&Zu(e,1,-1)}))}function Ao(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Lo(e){var t=So();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Eo,lastRenderedState:e},t.queue=e,e=e.dispatch=Xo.bind(null,co,e),[t.memoizedState,e]}function Mo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=co.updateQueue)?(t={lastEffect:null,stores:null},co.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zo(){return ko().memoizedState}function Do(e,t,n,r){var a=So();co.flags|=e,a.memoizedState=Mo(1|t,n,void 0,void 0===r?null:r)}function jo(e,t,n,r){var a=ko();r=void 0===r?null:r;var i=void 0;if(null!==fo){var o=fo.memoizedState;if(i=o.destroy,null!==r&&bo(r,o.deps))return void(a.memoizedState=Mo(t,n,i,r))}co.flags|=e,a.memoizedState=Mo(1|t,n,i,r)}function Io(e,t){return Do(8390656,8,e,t)}function Fo(e,t){return jo(2048,8,e,t)}function Uo(e,t){return jo(4,2,e,t)}function Vo(e,t){return jo(4,4,e,t)}function Bo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ho(e,t,n){return n=null!=n?n.concat([e]):null,jo(4,4,Bo.bind(null,t,e),n)}function Wo(){}function Go(e,t){var n=ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function $o(e,t){var n=ko();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function qo(e,t,n){return 0==(21&so)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=vt(),co.lanes|=n,Lu|=n,e.baseState=!0),t)}function Ko(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=uo.transition;uo.transition={};try{e(!1),t()}finally{bt=n,uo.transition=r}}function Qo(){return ko().memoizedState}function Yo(e,t,n){var r=Ju(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Jo(e)?Zo(t,n):(el(e,t,n),null!==(e=Zu(e,r,n=Xu()))&&tl(e,t,r))}function Xo(e,t,n){var r=Ju(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Jo(e))Zo(t,a);else{el(e,t,a);var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,l=i(o,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,o))return}catch(e){}null!==(e=Zu(e,r,n=Xu()))&&tl(e,t,r)}}function Jo(e){var t=e.alternate;return e===co||null!==t&&t===co}function Zo(e,t){vo=po=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){ts(e)?(null===(e=t.interleaved)?(n.next=n,null===ei?ei=[t]:ei.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var nl={readContext:Za,useCallback:yo,useContext:yo,useEffect:yo,useImperativeHandle:yo,useInsertionEffect:yo,useLayoutEffect:yo,useMemo:yo,useReducer:yo,useRef:yo,useState:yo,useDebugValue:yo,useDeferredValue:yo,useTransition:yo,useMutableSource:yo,useSyncExternalStore:yo,useId:yo,unstable_isNewReconciler:!1},rl={readContext:Za,useCallback:function(e,t){return So().memoizedState=[e,void 0===t?null:t],e},useContext:Za,useEffect:Io,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Do(4194308,4,Bo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Do(4194308,4,e,t)},useInsertionEffect:function(e,t){return Do(4,2,e,t)},useMemo:function(e,t){var n=So();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=So();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Yo.bind(null,co,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},So().memoizedState=e},useState:Lo,useDebugValue:Wo,useDeferredValue:function(e){return So().memoizedState=e},useTransition:function(){var e=Lo(!1),t=e[0];return e=Ko.bind(null,e[1]),So().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=co,a=So();if(Ai){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===xu)throw Error(i(349));0!=(30&so)||Po(r,t,n)}a.memoizedState=n;var o={value:n,getSnapshot:t};return a.queue=o,Io(Ro.bind(null,r,o,e),[e]),r.flags|=2048,Mo(9,No.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=So(),t=xu.identifierPrefix;if(Ai){var n=Oi;t=":"+t+"R"+(n=(Ei&~(1<<32-ot(Ei)-1)).toString(32)+n),0<(n=mo++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=go++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},al={readContext:Za,useCallback:Go,useContext:Za,useEffect:Fo,useImperativeHandle:Ho,useInsertionEffect:Uo,useLayoutEffect:Vo,useMemo:$o,useReducer:Oo,useRef:zo,useState:function(){return Oo(Eo)},useDebugValue:Wo,useDeferredValue:function(e){return qo(ko(),fo.memoizedState,e)},useTransition:function(){return[Oo(Eo)[0],ko().memoizedState]},useMutableSource:To,useSyncExternalStore:Co,useId:Qo,unstable_isNewReconciler:!1},il={readContext:Za,useCallback:Go,useContext:Za,useEffect:Fo,useImperativeHandle:Ho,useInsertionEffect:Uo,useLayoutEffect:Vo,useMemo:$o,useReducer:xo,useRef:zo,useState:function(){return xo(Eo)},useDebugValue:Wo,useDeferredValue:function(e){var t=ko();return null===fo?t.memoizedState=e:qo(t,fo.memoizedState,e)},useTransition:function(){return[xo(Eo)[0],ko().memoizedState]},useMutableSource:To,useSyncExternalStore:Co,useId:Qo,unstable_isNewReconciler:!1};function ol(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ul,sl,cl,fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=ai(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vu||(Vu=!0,Bu=r),ll(0,t)},n}function hl(e,t,n){(n=ai(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ll(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function pl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function ml(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ai(-1,1)).tag=2,ii(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function gl(e,t){if(!Ai)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function yl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function bl(e,t,n){var r=t.pendingProps;switch(Pi(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return yl(t),null;case 1:case 17:return Aa(t.type)&&La(),yl(t),null;case 3:return r=t.stateNode,eo(),Oa(Pa),Oa(Ca),oo(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Li&&(is(Li),Li=null))),yl(t),null;case 5:no(t);var a=Ji(Xi.current);if(n=t.type,null!==e&&null!=t.stateNode)sl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return yl(t),null}if(e=Ji(Qi.current),Fi(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[da]=t,r[ha]=o,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<zr.length;a++)Fr(zr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,o),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Fr("invalid",r);break;case"textarea":ae(r,o),Fr("invalid",r)}for(var u in ye(n,o),a=null,o)if(o.hasOwnProperty(u)){var s=o[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==o.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==o.suppressHydrationWarning&&Jr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":$(r),Z(r,o,!0);break;case"textarea":$(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Zr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[ha]=r,ul(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<zr.length;a++)Fr(zr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":Y(e,r),a=Q(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(o in ye(n,a),s=a)if(s.hasOwnProperty(o)){var c=s[o];"style"===o?me(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(l.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Fr("scroll",e):null!=c&&b(e,o,c,u))}switch(n){case"input":$(e),Z(e,r,!1);break;case"textarea":$(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return yl(t),null;case 6:if(e&&null!=t.stateNode)cl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=Ji(Xi.current),Ji(Qi.current),Fi(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(o=r.nodeValue!==n)&&null!==(e=Ni))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return yl(t),null;case 13:if(Oa(ro),r=t.memoizedState,Ai&&null!==Ri&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Ri;r;)r=sa(r.nextSibling);return Ui(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Fi(t),null===e){if(!r)throw Error(i(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(i(317));r[da]=t}else Ui(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return yl(t),null}return null!==Li&&(is(Li),Li=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Fi(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ro.current)?0===Ru&&(Ru=3):ps())),null!==t.updateQueue&&(t.flags|=4),yl(t),null);case 4:return eo(),null===e&&Br(t.stateNode.containerInfo),yl(t),null;case 10:return Ya(t.type._context),yl(t),null;case 19:if(Oa(ro),null===(o=t.memoizedState))return yl(t),null;if(r=0!=(128&t.flags),null===(u=o.rendering))if(r)gl(o,!1);else{if(0!==Ru||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ao(e))){for(t.flags|=128,gl(o,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(u=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=u.childLanes,o.lanes=u.lanes,o.child=u.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=u.memoizedProps,o.memoizedState=u.memoizedState,o.updateQueue=u.updateQueue,o.type=u.type,e=u.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ro,1&ro.current|2),t.child}e=e.sibling}null!==o.tail&&Xe()>Fu&&(t.flags|=128,r=!0,gl(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ao(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),gl(o,!0),null===o.tail&&"hidden"===o.tailMode&&!u.alternate&&!Ai)return yl(t),null}else 2*Xe()-o.renderingStartTime>Fu&&1073741824!==n&&(t.flags|=128,r=!0,gl(o,!1),t.lanes=4194304);o.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=o.last)?n.sibling=u:t.child=u,o.last=u)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Xe(),t.sibling=null,n=ro.current,xa(ro,r?1&n|2:1&n),t):(yl(t),null);case 22:case 23:return cs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Pu)&&(yl(t),6&t.subtreeFlags&&(t.flags|=8192)):yl(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ji(Qi.current);var i,o=null;switch(n){case"input":a=Q(e,a),r=Q(e,r),o=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),o=[];break;case"textarea":a=re(e,a),r=re(e,r),o=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(i in u)!u.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&u[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(o||(o=[]),o.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(o=o||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(o=o||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),o||u===s||(o=[])):(o=o||[]).push(c,s))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},cl=function(e,t,n,r){n!==r&&(t.flags|=4)};var _l=_.ReactCurrentOwner,wl=!1;function Sl(e,t,n,r){t.child=null===e?qi(t,null,n,r):$i(t,e.child,n,r)}function kl(e,t,n,r,a){n=n.render;var i=t.ref;return Ja(t,a),r=_o(e,t,n,r,i,a),n=wo(),null===e||wl?(Ai&&n&&Ci(t),t.flags|=1,Sl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function El(e,t,n,r,a){if(null===e){var i=n.type;return"function"!=typeof i||Rs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ls(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ol(e,t,i,r,a))}if(i=e.child,0==(e.lanes&a)){var o=i.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=As(i,r)).ref=t.ref,e.return=t,t.child=e}function Ol(e,t,n,r,a){if(null!==e){var i=e.memoizedProps;if(ur(i,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=i,0==(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);0!=(131072&e.flags)&&(wl=!0)}}return Cl(e,t,n,r,a)}function xl(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Nu,Pu),Pu|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Nu,Pu),Pu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,xa(Nu,Pu),Pu|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,xa(Nu,Pu),Pu|=r;return Sl(e,t,a,n),t.child}function Tl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cl(e,t,n,r,a){var i=Aa(n)?Na:Ca.current;return i=Ra(t,i),Ja(t,a),n=_o(e,t,n,r,i,a),r=wo(),null===e||wl?(Ai&&r&&Ci(t),t.flags|=1,Sl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Pl(e,t,n,r,a){if(Aa(n)){var i=!0;Da(t)}else i=!1;if(Ja(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),pi(t,n,r),mi(t,n,r,a),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var u=o.context,s=n.contextType;s="object"==typeof s&&null!==s?Za(s):Ra(t,s=Aa(n)?Na:Ca.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||u!==s)&&vi(t,o,r,s),ti=!1;var d=t.memoizedState;o.state=d,ui(t,r,o,a),u=t.memoizedState,l!==r||d!==u||Pa.current||ti?("function"==typeof c&&(fi(t,n,c,r),u=t.memoizedState),(l=ti||hi(t,n,l,r,d,u,s))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=s,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,ri(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Wa(t.type,l),o.props=s,f=t.pendingProps,d=o.context,u="object"==typeof(u=n.contextType)&&null!==u?Za(u):Ra(t,u=Aa(n)?Na:Ca.current);var h=n.getDerivedStateFromProps;(c="function"==typeof h||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==f||d!==u)&&vi(t,o,r,u),ti=!1,d=t.memoizedState,o.state=d,ui(t,r,o,a);var p=t.memoizedState;l!==f||d!==p||Pa.current||ti?("function"==typeof h&&(fi(t,n,h,r),p=t.memoizedState),(s=ti||hi(t,n,s,r,d,p,u)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,u),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=u,r=s):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Nl(e,t,n,r,i,a)}function Nl(e,t,n,r,a,i){Tl(e,t);var o=0!=(128&t.flags);if(!r&&!o)return a&&ja(t,n,!1),Wl(e,t,i);r=t.stateNode,_l.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=$i(t,e.child,null,i),t.child=$i(t,null,l,i)):Sl(e,t,l,i),t.memoizedState=r.state,a&&ja(t,n,!0),t.child}function Rl(e){var t=e.stateNode;t.pendingContext?Ma(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ma(0,t.context,!1),Zi(e,t.containerInfo)}function Al(e,t,n,r,a){return Ui(),Vi(a),t.flags|=256,Sl(e,t,n,r),t.child}var Ll={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function zl(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function Dl(e,t,n){var r,a=t.pendingProps,o=ro.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),xa(ro,1&o),null===e)return ji(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(o=a.children,e=a.fallback,l?(a=t.mode,l=t.child,o={mode:"hidden",children:o},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=o):l=zs(o,a,0,null),e=Ms(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=Ll,e):jl(t,o));if(null!==(o=e.memoizedState)){if(null!==(r=o.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Ul(e,t,n,Error(i(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,o=t.mode,a=zs({mode:"visible",children:a.children},o,0,null),(l=Ms(l,o,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,0!=(1&t.mode)&&$i(t,e.child,null,n),t.child.memoizedState=Ml(n),t.memoizedState=Ll,l);if(0==(1&t.mode))t=Ul(e,t,n,null);else if("$!"===r.data)t=Ul(e,t,n,Error(i(419)));else if(a=0!=(n&e.childLanes),wl||a){if(null!==(a=xu)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(a=0!=(l&(a.suspendedLanes|n))?0:l)&&a!==o.retryLane&&(o.retryLane=a,Zu(e,a,-1))}ps(),t=Ul(e,t,n,Error(i(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=xs.bind(null,e),r._reactRetry=t,t=null):(n=o.treeContext,Ri=sa(r.nextSibling),Ni=t,Ai=!0,Li=null,null!==n&&(wi[Si++]=Ei,wi[Si++]=Oi,wi[Si++]=ki,Ei=n.id,Oi=n.overflow,ki=t),(t=jl(t,t.pendingProps.children)).flags|=4096);return t}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?Ml(n):zl(o,n),l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?Ml(n):zl(o,n),l.childLanes=e.childLanes&~n,t.memoizedState=Ll,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}function jl(e,t){return(t=zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){var a=e.child;return e=a.sibling,n=As(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Fl(e,t,n,r,a){var i=t.mode,o=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&i)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=As(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==o?r=As(o,r):(r=Ms(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ul(e,t,n,r){return null!==r&&Vi(r),$i(t,e.child,null,n),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Xa(e.return,t,n)}function Bl(e,t,n,r,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a)}function Hl(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=ro.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vl(e,n,t);else if(19===e.tag)Vl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ro,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ao(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Bl(t,!1,a,n,i);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ao(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Bl(t,!0,n,null,i);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Lu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=As(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=As(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gl(e,t){switch(Pi(t),t.tag){case 1:return Aa(t.type)&&La(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return eo(),Oa(Pa),Oa(Ca),oo(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return no(t),null;case 13:if(Oa(ro),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));Ui()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oa(ro),null;case 4:return eo(),null;case 10:return Ya(t.type._context),null;case 22:case 23:return cs(),null;default:return null}}var $l=!1,ql=!1,Kl="function"==typeof WeakSet?WeakSet:Set,Ql=null;function Yl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ks(e,t,n)}else n.current=null}function Xl(e,t,n){try{n()}catch(n){ks(e,t,n)}}var Jl=!1;function Zl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&Xl(t,n,i)}a=a.next}while(a!==r)}}function eu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function tu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function nu(e){var t=e.alternate;null!==t&&(e.alternate=null,nu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[ha],delete t[va],delete t[ma],delete t[ga]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ru(e){return 5===e.tag||3===e.tag||4===e.tag}function au(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ru(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function iu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(iu(e,t,n),e=e.sibling;null!==e;)iu(e,t,n),e=e.sibling}function ou(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ou(e,t,n),e=e.sibling;null!==e;)ou(e,t,n),e=e.sibling}var lu=null,uu=!1;function su(e,t,n){for(n=n.child;null!==n;)cu(e,t,n),n=n.sibling}function cu(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:ql||Yl(n,t);case 6:var r=lu,a=uu;lu=null,su(e,t,n),uu=a,null!==(lu=r)&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):lu.removeChild(n.stateNode));break;case 18:null!==lu&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Bt(e)):ua(lu,n.stateNode));break;case 4:r=lu,a=uu,lu=n.stateNode.containerInfo,uu=!0,su(e,t,n),lu=r,uu=a;break;case 0:case 11:case 14:case 15:if(!ql&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var i=a,o=i.destroy;i=i.tag,void 0!==o&&(0!=(2&i)||0!=(4&i))&&Xl(n,t,o),a=a.next}while(a!==r)}su(e,t,n);break;case 1:if(!ql&&(Yl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){ks(n,t,e)}su(e,t,n);break;case 21:su(e,t,n);break;case 22:1&n.mode?(ql=(r=ql)||null!==n.memoizedState,su(e,t,n),ql=r):su(e,t,n);break;default:su(e,t,n)}}function fu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Kl),t.forEach((function(t){var r=Ts.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var o=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:lu=u.stateNode,uu=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,uu=!0;break e}u=u.return}if(null===lu)throw Error(i(160));cu(o,l,a),lu=null,uu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){ks(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)hu(t,e),t=t.sibling}function hu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(du(t,e),pu(e),4&r){try{Zl(3,e,e.return),eu(3,e)}catch(t){ks(e,e.return,t)}try{Zl(5,e,e.return)}catch(t){ks(e,e.return,t)}}break;case 1:du(t,e),pu(e),512&r&&null!==n&&Yl(n,n.return);break;case 5:if(du(t,e),pu(e),512&r&&null!==n&&Yl(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){ks(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var o=e.memoizedProps,l=null!==n?n.memoizedProps:o,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===o.type&&null!=o.name&&X(a,o),be(u,l);var c=be(u,o);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?me(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":J(a,o);break;case"textarea":ie(a,o);break;case"select":var h=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!o.multiple;var p=o.value;null!=p?ne(a,!!o.multiple,p,!1):h!==!!o.multiple&&(null!=o.defaultValue?ne(a,!!o.multiple,o.defaultValue,!0):ne(a,!!o.multiple,o.multiple?[]:"",!1))}a[ha]=o}catch(t){ks(e,e.return,t)}}break;case 6:if(du(t,e),pu(e),4&r){if(null===e.stateNode)throw Error(i(162));c=e.stateNode,f=e.memoizedProps;try{c.nodeValue=f}catch(t){ks(e,e.return,t)}}break;case 3:if(du(t,e),pu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){ks(e,e.return,t)}break;case 4:default:du(t,e),pu(e);break;case 13:du(t,e),pu(e),8192&(c=e.child).flags&&null!==c.memoizedState&&(null===c.alternate||null===c.alternate.memoizedState)&&(Iu=Xe()),4&r&&fu(e);break;case 22:if(c=null!==n&&null!==n.memoizedState,1&e.mode?(ql=(f=ql)||c,du(t,e),ql=f):du(t,e),pu(e),8192&r){f=null!==e.memoizedState;e:for(d=null,h=e;;){if(5===h.tag){if(null===d){d=h;try{a=h.stateNode,f?"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none":(u=h.stateNode,l=null!=(s=h.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=ve("display",l))}catch(t){ks(e,e.return,t)}}}else if(6===h.tag){if(null===d)try{h.stateNode.nodeValue=f?"":h.memoizedProps}catch(t){ks(e,e.return,t)}}else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===e)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;null===h.sibling;){if(null===h.return||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}if(f&&!c&&0!=(1&e.mode))for(Ql=e,e=e.child;null!==e;){for(c=Ql=e;null!==Ql;){switch(d=(f=Ql).child,f.tag){case 0:case 11:case 14:case 15:Zl(4,f,f.return);break;case 1:if(Yl(f,f.return),"function"==typeof(o=f.stateNode).componentWillUnmount){h=f,p=f.return;try{a=h,o.props=a.memoizedProps,o.state=a.memoizedState,o.componentWillUnmount()}catch(e){ks(h,p,e)}}break;case 5:Yl(f,f.return);break;case 22:if(null!==f.memoizedState){yu(c);continue}}null!==d?(d.return=f,Ql=d):yu(c)}e=e.sibling}}break;case 19:du(t,e),pu(e),4&r&&fu(e);case 21:}}function pu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ru(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),ou(e,au(e),a);break;case 3:case 4:var o=r.stateNode.containerInfo;iu(e,au(e),o);break;default:throw Error(i(161))}}catch(t){ks(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vu(e,t,n){Ql=e,mu(e,t,n)}function mu(e,t,n){for(var r=0!=(1&e.mode);null!==Ql;){var a=Ql,i=a.child;if(22===a.tag&&r){var o=null!==a.memoizedState||$l;if(!o){var l=a.alternate,u=null!==l&&null!==l.memoizedState||ql;l=$l;var s=ql;if($l=o,(ql=u)&&!s)for(Ql=a;null!==Ql;)u=(o=Ql).child,22===o.tag&&null!==o.memoizedState?bu(a):null!==u?(u.return=o,Ql=u):bu(a);for(;null!==i;)Ql=i,mu(i,t,n),i=i.sibling;Ql=a,$l=l,ql=s}gu(e)}else 0!=(8772&a.subtreeFlags)&&null!==i?(i.return=a,Ql=i):gu(e)}}function gu(e){for(;null!==Ql;){var t=Ql;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:ql||eu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!ql)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Wa(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&si(t,o,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}si(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Bt(d)}}}break;default:throw Error(i(163))}ql||512&t.flags&&tu(t)}catch(e){ks(t,t.return,e)}}if(t===e){Ql=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ql=n;break}Ql=t.return}}function yu(e){for(;null!==Ql;){var t=Ql;if(t===e){Ql=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ql=n;break}Ql=t.return}}function bu(e){for(;null!==Ql;){var t=Ql;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eu(4,t)}catch(e){ks(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ks(t,a,e)}}var i=t.return;try{tu(t)}catch(e){ks(t,i,e)}break;case 5:var o=t.return;try{tu(t)}catch(e){ks(t,o,e)}}}catch(e){ks(t,t.return,e)}if(t===e){Ql=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Ql=l;break}Ql=t.return}}var _u,wu=Math.ceil,Su=_.ReactCurrentDispatcher,ku=_.ReactCurrentOwner,Eu=_.ReactCurrentBatchConfig,Ou=0,xu=null,Tu=null,Cu=0,Pu=0,Nu=Ea(0),Ru=0,Au=null,Lu=0,Mu=0,zu=0,Du=null,ju=null,Iu=0,Fu=1/0,Uu=null,Vu=!1,Bu=null,Hu=null,Wu=!1,Gu=null,$u=0,qu=0,Ku=null,Qu=-1,Yu=0;function Xu(){return 0!=(6&Ou)?Xe():-1!==Qu?Qu:Qu=Xe()}function Ju(e){return 0==(1&e.mode)?1:0!=(2&Ou)&&0!==Cu?Cu&-Cu:null!==Ha.transition?(0===Yu&&(Yu=vt()),Yu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function Zu(e,t,n){if(50<qu)throw qu=0,Ku=null,Error(i(185));var r=es(e,t);return null===r?null:(gt(r,t,n),0!=(2&Ou)&&r===xu||(r===xu&&(0==(2&Ou)&&(Mu|=t),4===Ru&&os(r,Cu)),ns(r,n),1===t&&0===Ou&&0==(1&e.mode)&&(Fu=Xe()+500,Fa&&Ba())),r)}function es(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ts(e){return(null!==xu||null!==ei)&&0!=(1&e.mode)&&0==(2&Ou)}function ns(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var o=31-ot(i),l=1<<o,u=a[o];-1===u?0!=(l&n)&&0==(l&r)||(a[o]=ht(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=dt(e,e===xu?Cu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Fa=!0,Va(e)}(ls.bind(null,e)):Va(ls.bind(null,e)),oa((function(){0===Ou&&Ba()})),n=null;else{switch(_t(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Cs(n,rs.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rs(e,t){if(Qu=-1,Yu=0,0!=(6&Ou))throw Error(i(327));var n=e.callbackNode;if(ws()&&e.callbackNode!==n)return null;var r=dt(e,e===xu?Cu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vs(e,r);else{t=r;var a=Ou;Ou|=2;var o=hs();for(xu===e&&Cu===t||(Uu=null,Fu=Xe()+500,fs(e,t));;)try{gs();break}catch(t){ds(e,t)}Qa(),Su.current=o,Ou=a,null!==Tu?t=0:(xu=null,Cu=0,t=Ru)}if(0!==t){if(2===t&&0!==(a=pt(e))&&(r=a,t=as(e,a)),1===t)throw n=Au,fs(e,0),os(e,r),ns(e,Xe()),n;if(6===t)os(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],i=a.getSnapshot;a=a.value;try{if(!lr(i(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vs(e,r))&&0!==(o=pt(e))&&(r=o,t=as(e,o)),1===t))throw n=Au,fs(e,0),os(e,r),ns(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:_s(e,ju,Uu);break;case 3:if(os(e,r),(130023424&r)===r&&10<(t=Iu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Xu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(_s.bind(null,e,ju,Uu),t);break}_s(e,ju,Uu);break;case 4:if(os(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-ot(r);o=1<<l,(l=t[l])>a&&(a=l),r&=~o}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wu(r/1960))-r)){e.timeoutHandle=ra(_s.bind(null,e,ju,Uu),r);break}_s(e,ju,Uu);break;default:throw Error(i(329))}}}return ns(e,Xe()),e.callbackNode===n?rs.bind(null,e):null}function as(e,t){var n=Du;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=vs(e,t))&&(t=ju,ju=n,null!==t&&is(t)),e}function is(e){null===ju?ju=e:ju.push.apply(ju,e)}function os(e,t){for(t&=~zu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&Ou))throw Error(i(327));ws();var t=dt(e,0);if(0==(1&t))return ns(e,Xe()),null;var n=vs(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Au,fs(e,0),os(e,t),ns(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,_s(e,ju,Uu),ns(e,Xe()),null}function us(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&(Fu=Xe()+500,Fa&&Ba())}}function ss(e){null!==Gu&&0===Gu.tag&&0==(6&Ou)&&ws();var t=Ou;Ou|=1;var n=Eu.transition,r=bt;try{if(Eu.transition=null,bt=1,e)return e()}finally{bt=r,Eu.transition=n,0==(6&(Ou=t))&&Ba()}}function cs(){Pu=Nu.current,Oa(Nu)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(Pi(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&La();break;case 3:eo(),Oa(Pa),Oa(Ca),oo();break;case 5:no(r);break;case 4:eo();break;case 13:case 19:Oa(ro);break;case 10:Ya(r.type._context);break;case 22:case 23:cs()}n=n.return}if(xu=e,Tu=e=As(e.current,null),Cu=Pu=t,Ru=0,Au=null,zu=Mu=Lu=0,ju=Du=null,null!==ei){for(t=0;t<ei.length;t++)if(null!==(r=(n=ei[t]).interleaved)){n.interleaved=null;var a=r.next,i=n.pending;if(null!==i){var o=i.next;i.next=a,r.next=o}n.pending=r}ei=null}return e}function ds(e,t){for(;;){var n=Tu;try{if(Qa(),lo.current=nl,po){for(var r=co.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}po=!1}if(so=0,ho=fo=co=null,vo=!1,mo=0,ku.current=null,null===n||null===n.return){Ru=1,Au=t,Tu=null;break}e:{var o=e,l=n.return,u=n,s=t;if(t=Cu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var h=f.alternate;h?(f.updateQueue=h.updateQueue,f.memoizedState=h.memoizedState,f.lanes=h.lanes):(f.updateQueue=null,f.memoizedState=null)}var p=vl(l);if(null!==p){p.flags&=-257,ml(p,l,u,0,t),1&p.mode&&pl(o,c,t),s=c;var v=(t=p).updateQueue;if(null===v){var m=new Set;m.add(s),t.updateQueue=m}else v.add(s);break e}if(0==(1&t)){pl(o,c,t),ps();break e}s=Error(i(426))}else if(Ai&&1&u.mode){var g=vl(l);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),ml(g,l,u,0,t),Vi(s);break e}}o=s,4!==Ru&&(Ru=2),null===Du?Du=[o]:Du.push(o),s=ol(s,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,li(u,dl(0,s,t));break e;case 1:o=s;var y=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hu||!Hu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,li(u,hl(u,o,t));break e}}u=u.return}while(null!==u)}bs(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function hs(){var e=Su.current;return Su.current=nl,null===e?nl:e}function ps(){0!==Ru&&3!==Ru&&2!==Ru||(Ru=4),null===xu||0==(268435455&Lu)&&0==(268435455&Mu)||os(xu,Cu)}function vs(e,t){var n=Ou;Ou|=2;var r=hs();for(xu===e&&Cu===t||(Uu=null,fs(e,t));;)try{ms();break}catch(t){ds(e,t)}if(Qa(),Ou=n,Su.current=r,null!==Tu)throw Error(i(261));return xu=null,Cu=0,Ru}function ms(){for(;null!==Tu;)ys(Tu)}function gs(){for(;null!==Tu&&!Qe();)ys(Tu)}function ys(e){var t=_u(e.alternate,e,Pu);e.memoizedProps=e.pendingProps,null===t?bs(e):Tu=t,ku.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=bl(n,t,Pu)))return void(Tu=n)}else{if(null!==(n=Gl(n,t)))return n.flags&=32767,void(Tu=n);if(null===e)return Ru=6,void(Tu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===Ru&&(Ru=5)}function _s(e,t,n){var r=bt,a=Eu.transition;try{Eu.transition=null,bt=1,function(e,t,n,r){do{ws()}while(null!==Gu);if(0!=(6&Ou))throw Error(i(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-ot(n),i=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~i}}(e,o),e===xu&&(Tu=xu=null,Cu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wu||(Wu=!0,Cs(tt,(function(){return ws(),null}))),o=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||o){o=Eu.transition,Eu.transition=null;var l=bt;bt=1;var u=Ou;Ou|=4,ku.current=null,function(e,t){if(ea=Wt,hr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,h=null;t:for(;;){for(var p;d!==n||0!==a&&3!==d.nodeType||(u=l+a),d!==o||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(p=d.firstChild);)h=d,d=p;for(;;){if(d===e)break t;if(h===n&&++c===a&&(u=l),h===o&&++f===r&&(s=l),null!==(p=d.nextSibling))break;h=(d=h).parentNode}d=p}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Ql=t;null!==Ql;)if(e=(t=Ql).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ql=e;else for(;null!==Ql;){t=Ql;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var m=v.memoizedProps,g=v.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?m:Wa(t.type,m),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var _=t.stateNode.containerInfo;if(1===_.nodeType)_.textContent="";else if(9===_.nodeType){var w=_.body;null!=w&&(w.textContent="")}break;default:throw Error(i(163))}}catch(e){ks(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ql=e;break}Ql=t.return}v=Jl,Jl=!1}(e,n),hu(n,e),pr(ta),Wt=!!ea,ta=ea=null,e.current=n,vu(n,e,a),Ye(),Ou=u,bt=l,Eu.transition=o}else e.current=n;if(Wu&&(Wu=!1,Gu=e,$u=a),0===(o=e.pendingLanes)&&(Hu=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ns(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if(Vu)throw Vu=!1,e=Bu,Bu=null,e;0!=(1&$u)&&0!==e.tag&&ws(),0!=(1&(o=e.pendingLanes))?e===Ku?qu++:(qu=0,Ku=e):qu=0,Ba()}(e,t,n,r)}finally{Eu.transition=a,bt=r}return null}function ws(){if(null!==Gu){var e=_t($u),t=Eu.transition,n=bt;try{if(Eu.transition=null,bt=16>e?16:e,null===Gu)var r=!1;else{if(e=Gu,Gu=null,$u=0,0!=(6&Ou))throw Error(i(331));var a=Ou;for(Ou|=4,Ql=e.current;null!==Ql;){var o=Ql,l=o.child;if(0!=(16&Ql.flags)){var u=o.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ql=c;null!==Ql;){var f=Ql;switch(f.tag){case 0:case 11:case 15:Zl(8,f,o)}var d=f.child;if(null!==d)d.return=f,Ql=d;else for(;null!==Ql;){var h=(f=Ql).sibling,p=f.return;if(nu(f),f===c){Ql=null;break}if(null!==h){h.return=p,Ql=h;break}Ql=p}}}var v=o.alternate;if(null!==v){var m=v.child;if(null!==m){v.child=null;do{var g=m.sibling;m.sibling=null,m=g}while(null!==m)}}Ql=o}}if(0!=(2064&o.subtreeFlags)&&null!==l)l.return=o,Ql=l;else e:for(;null!==Ql;){if(0!=(2048&(o=Ql).flags))switch(o.tag){case 0:case 11:case 15:Zl(9,o,o.return)}var y=o.sibling;if(null!==y){y.return=o.return,Ql=y;break e}Ql=o.return}}var b=e.current;for(Ql=b;null!==Ql;){var _=(l=Ql).child;if(0!=(2064&l.subtreeFlags)&&null!==_)_.return=l,Ql=_;else e:for(l=b;null!==Ql;){if(0!=(2048&(u=Ql).flags))try{switch(u.tag){case 0:case 11:case 15:eu(9,u)}}catch(e){ks(u,u.return,e)}if(u===l){Ql=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,Ql=w;break e}Ql=u.return}}if(Ou=a,Ba(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Eu.transition=t}}return!1}function Ss(e,t,n){ii(e,t=dl(0,t=ol(n,t),1)),t=Xu(),null!==(e=es(e,1))&&(gt(e,1,t),ns(e,t))}function ks(e,t,n){if(3===e.tag)Ss(e,e,n);else for(;null!==t;){if(3===t.tag){Ss(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){ii(t,e=hl(t,e=ol(n,e),1)),e=Xu(),null!==(t=es(t,1))&&(gt(t,1,e),ns(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Xu(),e.pingedLanes|=e.suspendedLanes&n,xu===e&&(Cu&n)===n&&(4===Ru||3===Ru&&(130023424&Cu)===Cu&&500>Xe()-Iu?fs(e,0):zu|=n),ns(e,t)}function Os(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Xu();null!==(e=es(e,t))&&(gt(e,t,n),ns(e,n))}function xs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Os(e,n)}function Ts(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Os(e,n)}function Cs(e,t){return qe(e,t)}function Ps(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Ps(e,t,n,r)}function Rs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function As(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ls(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Rs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Ms(n.children,a,o,t);case E:l=8,a|=8;break;case O:return(e=Ns(12,n,t,2|a)).elementType=O,e.lanes=o,e;case P:return(e=Ns(13,n,t,a)).elementType=P,e.lanes=o,e;case N:return(e=Ns(19,n,t,a)).elementType=N,e.lanes=o,e;case L:return zs(n,a,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:l=10;break e;case T:l=9;break e;case C:l=11;break e;case R:l=14;break e;case A:l=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ns(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function Ms(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function zs(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=L,e.lanes=n,e.stateNode={},e}function Ds(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function js(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fs(e,t,n,r,a,i,o,l,u){return e=new Is(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ns(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},ni(i),e}function Us(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Vs(e){if(!e)return Ta;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Aa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Aa(n))return za(e,n,t)}return t}function Bs(e,t,n,r,a,i,o,l,u){return(e=Fs(n,r,!0,e,0,i,0,l,u)).context=Vs(null),n=e.current,(i=ai(r=Xu(),a=Ju(n))).callback=null!=t?t:null,ii(n,i),e.current.lanes=a,gt(e,a,r),ns(e,r),e}function Hs(e,t,n,r){var a=t.current,i=Xu(),o=Ju(a);return n=Vs(n),null===t.context?t.context=n:t.pendingContext=n,(t=ai(i,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ii(a,t),null!==(e=Zu(a,o,i))&&oi(e,a,o),o}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $s(e,t){Gs(e,t),(e=e.alternate)&&Gs(e,t)}_u=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Rl(t),Ui();break;case 5:to(t);break;case 1:Aa(t.type)&&Da(t);break;case 4:Zi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(Ga,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ro,1&ro.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Dl(e,t,n):(xa(ro,1&ro.current),null!==(e=Wl(e,t,n))?e.sibling:null);xa(ro,1&ro.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ro,ro.current),r)break;return null;case 22:case 23:return t.lanes=0,xl(e,t,n)}return Wl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,Ai&&0!=(1048576&t.flags)&&Ti(t,_i,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Ra(t,Ca.current);Ja(t,n),a=_o(null,t,r,e,a,n);var o=wo();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Aa(r)?(o=!0,Da(t)):o=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ni(t),a.updater=di,t.stateNode=a,a._reactInternals=t,mi(t,r,e,n),t=Nl(null,t,r,!0,o,n)):(t.tag=0,Ai&&o&&Ci(t),Sl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Rs(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===R)return 14}return 2}(r),e=Wa(r,e),a){case 0:t=Cl(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=kl(null,t,r,e,n);break e;case 14:t=El(null,t,r,Wa(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Cl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Pl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 3:e:{if(Rl(t),null===e)throw Error(i(387));r=t.pendingProps,a=(o=t.memoizedState).element,ri(e,t),ui(t,r,null,n);var l=t.memoizedState;if(r=l.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Al(e,t,r,n,a=Error(i(423)));break e}if(r!==a){t=Al(e,t,r,n,a=Error(i(424)));break e}for(Ri=sa(t.stateNode.containerInfo.firstChild),Ni=t,Ai=!0,Li=null,n=qi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Ui(),r===a){t=Wl(e,t,n);break e}Sl(e,t,r,n)}t=t.child}return t;case 5:return to(t),null===e&&ji(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==o&&na(r,o)&&(t.flags|=32),Tl(e,t),Sl(e,t,l,n),t.child;case 6:return null===e&&ji(t),null;case 13:return Dl(e,t,n);case 4:return Zi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=$i(t,null,r,n):Sl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,kl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,o=t.memoizedProps,l=a.value,xa(Ga,r._currentValue),r._currentValue=l,null!==o)if(lr(o.value,l)){if(o.children===a.children&&!Pa.current){t=Wl(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var u=o.dependencies;if(null!==u){l=o.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===o.tag){(s=ai(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),Xa(o.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===o.tag)l=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(l=o.return))throw Error(i(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Xa(l,n,t),l=o.sibling}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===t){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}Sl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ja(t,n),r=r(a=Za(a)),t.flags|=1,Sl(e,t,r,n),t.child;case 14:return a=Wa(r=t.type,t.pendingProps),El(e,t,r,a=Wa(r.type,a),n);case 15:return Ol(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Wa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Aa(r)?(e=!0,Da(t)):e=!1,Ja(t,n),pi(t,r,a),mi(t,r,a,n),Nl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return xl(e,t,n)}throw Error(i(156,t.tag))};var qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Qs(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function Zs(e,t,n,r,a){var i=n._reactRootContainer;if(i){var o=i;if("function"==typeof a){var l=a;a=function(){var e=Ws(o);l.call(e)}}Hs(t,o,e,a)}else o=function(e,t,n,r,a){if(a){if("function"==typeof r){var i=r;r=function(){var e=Ws(o);i.call(e)}}var o=Bs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=o,e[pa]=o.current,Br(8===e.nodeType?e.parentNode:e),ss(),o}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Ws(u);l.call(e)}}var u=Fs(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[pa]=u.current,Br(8===e.nodeType?e.parentNode:e),ss((function(){Hs(t,u,n,r)})),u}(n,t,e,a,r);return Ws(o)}Qs.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));Hs(e,t,null,null)},Qs.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ss((function(){Hs(null,e,null,null)})),t[pa]=null}},Qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Lt.length&&0!==t&&t<Lt[n].priority;n++);Lt.splice(n,0,e),0===n&&jt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),ns(t,Xe()),0==(6&Ou)&&(Fu=Xe()+500,Ba()))}break;case 13:var r=Xu();ss((function(){return Zu(e,1,r)})),$s(e,1)}},St=function(e){13===e.tag&&(Zu(e,134217728,Xu()),$s(e,134217728))},kt=function(e){if(13===e.tag){var t=Xu(),n=Ju(e);Zu(e,n,t),$s(e,n)}},Et=function(){return bt},Ot=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=wa(r);if(!a)throw Error(i(90));q(r),J(r,a)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=us,Pe=ss;var ec={usingClientEntryPoint:!1,Events:[ba,_a,wa,xe,Te,us]},tc={findFiberByHostInstance:ya,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),it=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(i(200));return Us(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(i(299));var n=!1,r="",a=qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Fs(e,1,!1,null,0,n,0,r,a),e[pa]=t.current,Br(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e){return ss(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(i(200));return Zs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,a=!1,o="",l=qs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Bs(t,null,e,1,null!=n?n:null,a,0,o,l),e[pa]=t.current,Br(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Qs(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(i(200));return Zs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(i(40));return!!e._reactRootContainer&&(ss((function(){Zs(null,null,e,!1,(function(){e._reactRootContainer=null,e[pa]=null}))})),!0)},t.unstable_batchedUpdates=us,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Zs(e,t,n,!1,r)},t.version="18.1.0-next-22edb9f77-20220426"},745:(e,t,n)=>{var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var _=b.prototype=new y;_.constructor=b,v(_,g.prototype),_.isPureReactComponent=!0;var w=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,r){var a,i={},o=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)S.call(t,a)&&!E.hasOwnProperty(a)&&(i[a]=t[a]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===i[a]&&(i[a]=u[a]);return{$$typeof:n,type:e,key:o,ref:l,props:i,_owner:k.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var T=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,i,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return o=o(u=e),e=""===i?"."+C(u,0):i,w(o)?(a="",null!=e&&(a=e.replace(T,"$&/")+"/"),P(o,t,a,"",(function(e){return e}))):null!=o&&(x(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,a+(!o.key||u&&u.key===o.key?"":(""+o.key).replace(T,"$&/")+"/")+e)),t.push(o)),1;if(u=0,i=""===i?".":i+":",w(e))for(var s=0;s<e.length;s++){var c=i+C(l=e[s],s);u+=P(l,t,a,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,a,c=i+C(l,s++),o);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},L={transition:null},M={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:L,ReactCurrentOwner:k};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=v({},e.props),i=e.key,o=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,l=k.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:i,ref:o,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=L.transition;L.transition={};try{e()}finally{L.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.1.0"},294:(e,t,n)=>{e.exports=n(408)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<i(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>i(u,n))s<a&&0>i(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,h=3,p=!1,v=!1,m=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(m=!1,_(e),!v)if(null!==r(s))v=!0,L(S);else{var t=r(c);null!==t&&M(w,t.startTime-e)}}function S(e,n){v=!1,m&&(m=!1,y(x),x=-1),p=!0;var i=h;try{for(_(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!P());){var o=d.callback;if("function"==typeof o){d.callback=null,h=d.priorityLevel;var l=o(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&a(s),_(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&M(w,f.startTime-n),u=!1}return u}finally{d=null,h=i,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,O=null,x=-1,T=5,C=-1;function P(){return!(t.unstable_now()-C<T)}function N(){if(null!==O){var e=t.unstable_now();C=e;var n=!0;try{n=O(!0,e)}finally{n?k():(E=!1,O=null)}}else E=!1}if("function"==typeof b)k=function(){b(N)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,A=R.port2;R.port1.onmessage=N,k=function(){A.postMessage(null)}}else k=function(){g(N,0)};function L(e){O=e,E||(E=!0,k())}function M(e,n){x=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||p||(v=!0,L(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,a,i){var o=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>o?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(m?(y(x),x=-1):m=!0,M(w,i-o))):(e.sortIndex=l,n(s,e),v||p||(v=!0,L(S))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},840:(e,t,n)=>{e.exports=n(53)},904:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AssertLessOrEqualThanError=t.AssertLessThanError=t.AssertGreaterOrEqualThanError=t.AssertGreaterThanError=t.AssertIntegerError=t.AssertError=t.assertLessOrEqualThan=t.assertLessThan=t.assertGreaterOrEqualThan=t.assertGreaterThan=t.assertInteger=void 0,t.assertInteger=function(e){if(!Number.isInteger(e))throw new r},t.assertGreaterThan=function(e,t){if(e<=t)throw new a},t.assertGreaterOrEqualThan=function(e,t){if(e<t)throw new i},t.assertLessThan=function(e,t){if(e>=t)throw new o},t.assertLessOrEqualThan=function(e,t){if(e>t)throw new l};class n extends Error{}t.AssertError=n;class r extends n{}t.AssertIntegerError=r;class a extends n{}t.AssertGreaterThanError=a;class i extends n{}t.AssertGreaterOrEqualThanError=i;class o extends n{}t.AssertLessThanError=o;class l extends n{}t.AssertLessOrEqualThanError=l},469:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(904),a=n(331);class i{constructor(e,t,n){this.red=e,this.green=t,this.blue=n,(0,r.assertGreaterOrEqualThan)(e,0),(0,r.assertGreaterOrEqualThan)(t,0),(0,r.assertGreaterOrEqualThan)(n,0),(0,r.assertLessOrEqualThan)(e,255),(0,r.assertLessOrEqualThan)(t,255),(0,r.assertLessOrEqualThan)(n,255)}getRed(){return this.red}getGreen(){return this.green}getBlue(){return this.blue}mix(e,t){return new i(Math.round(this.red*t+e.getRed()*(1-t)),Math.round(this.green*t+e.getGreen()*(1-t)),Math.round(this.blue*t+e.getBlue()*(1-t)))}toHexFormat(){if(this.hex)return this.hex;const e=e=>1===e.length?"0"+e:e;return this.hex="#"+e(this.red.toString(16))+e(this.green.toString(16))+e(this.blue.toString(16))}static random(){return new i((0,a.randomInt)(0,255),(0,a.randomInt)(0,255),(0,a.randomInt)(0,255))}static fromHex(e){e.startsWith("#")&&(e=e.slice(1));const t=parseInt(e.slice(0,2),16),n=parseInt(e.slice(2,4),16),r=parseInt(e.slice(4,6),16);return new i(t,n,r)}}t.default=i},331:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.randomInt=void 0,t.randomInt=function(e,t){const n=t-e+1;return Math.floor(Math.random()*n)+e}},386:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,n,r){this.grid=e,this.x=t,this.y=n,this.factory=r}moveByOffest(e,t){const n=this.getCoordinatesbyOffset(e,t),r=this.grid.getCell(this.x,this.y);this.grid.getCell(...n).isEmpty()&&(this.grid.delete(this.x,this.y),this.grid.insert(n[0],n[1],r))}deleteByOffset(e,t){this.grid.delete(...this.getCoordinatesbyOffset(e,t))}getByOffest(e,t){return this.grid.getCell(...this.getCoordinatesbyOffset(e,t))}replace(e){this.grid.insert(this.x,this.y,e(this.factory))}getCoordinatesbyOffset(e,t){const n=this.grid.getSize();let r=this.x+e,a=this.y+t;for(;r<0;)r+=n.getWidth();for(;a<0;)a+=n.getHeight();return[r%n.getWidth(),a%n.getHeight()]}}},18:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(425),a=n(874),i=n(815),o=n(906),l=n(997);t.default=class{createWall(){return this.wall?this.wall:this.wall=new l.WallCell}createEmpty(){return this.empty?this.empty:this.empty=new r.EmptyCell}createOrganism(e,t,n){return new i.OrganismCell(e,t,n)}createPlant(){return this.plant?this.plant:this.plant=new o.PlantCell}createMeat(){return this.meat?this.meat:this.meat=new a.MeatCell}}},467:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{visitEmpty(e){}visitWall(e){}visitOrganism(e){}visitPlant(e){}visitMeat(e){}}},211:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Cell=void 0,t.Cell=class{update(e){}isStatic(){return!0}isEmpty(){return!1}}},675:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Direction=void 0,(n=t.Direction||(t.Direction={}))[n.NORTH=0]="NORTH",n[n.NORTH_EAST=1]="NORTH_EAST",n[n.NORTH_WEST=2]="NORTH_WEST",n[n.SOUTH=3]="SOUTH",n[n.SOUTH_EAST=4]="SOUTH_EAST",n[n.SOUTH_WEST=5]="SOUTH_WEST",n[n.EAST=6]="EAST",n[n.WEST=7]="WEST",function(e){e.getOffset=function(t){switch(t){case e.NORTH:return[0,-1];case e.NORTH_EAST:return[1,-1];case e.NORTH_WEST:return[-1,-1];case e.SOUTH:return[0,1];case e.SOUTH_EAST:return[1,1];case e.SOUTH_WEST:return[-1,1];case e.EAST:return[1,0];case e.WEST:return[-1,0]}},e.random=function(){const t=Object.keys(e).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)));return t[Math.floor(Math.random()*t.length)]},e.rotateLeft=function(t){switch(t){case e.NORTH:return e.NORTH_WEST;case e.NORTH_EAST:return e.NORTH;case e.NORTH_WEST:return e.WEST;case e.SOUTH:return e.SOUTH_EAST;case e.SOUTH_EAST:return e.EAST;case e.SOUTH_WEST:return e.SOUTH;case e.EAST:return e.NORTH_EAST;case e.WEST:return e.SOUTH_WEST}},e.rotateRight=function(t){switch(t){case e.NORTH:return e.NORTH_EAST;case e.NORTH_EAST:return e.EAST;case e.NORTH_WEST:return e.NORTH;case e.SOUTH:return e.SOUTH_WEST;case e.SOUTH_EAST:return e.SOUTH;case e.SOUTH_WEST:return e.WEST;case e.EAST:return e.SOUTH_EAST;case e.WEST:return e.NORTH_WEST}}}(t.Direction||(t.Direction={}))},425:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyCell=void 0;const r=n(211);class a extends r.Cell{visit(e){e.visitEmpty(this)}isEmpty(){return!0}}t.EmptyCell=a},4:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WALL_TYPE=void 0;const r=n(469),a=n(18),i=n(188),o=n(816),l=n(828);var u;!function(e){e.NONE="none",e.AROUND="around"}(u=t.WALL_TYPE||(t.WALL_TYPE={})),t.default=function(e){e=Object.assign({width:200,height:100,walls:u.NONE},e);const t=new a.default,n=new l.Size(e.width,e.height),s=new i.default(n,t);return function(e,t){const n=e.getGrid().getSize();if(t===u.AROUND)for(const{x:t,y:r}of e.getGrid())0!==t&&0!==r&&t!==n.getWidth()-1&&r!==n.getHeight()-1||e.getGrid().insert(t,r,e.getCellFactory().createWall())}(s,e.walls),function(e){const t=e.getCellFactory();for(const{x:n,y:a,cell:i}of e.getGrid())i.isEmpty()&&Math.random()<.01&&e.getGrid().insert(n,a,t.createOrganism(r.default.random(),o.default.createRandom()))}(s),s}},188:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameEvents=void 0;const r=n(386),a=n(704);class i{constructor(){}}t.GameEvents=class{constructor(){this.preStep=i,this.postStep=i,this.step=i,this.start=i,this.pause=i}},t.default=class{constructor(e,t){this.cellFactory=t,this.step=0,this.timeoutDelay=40,this.grid=new a.default(e,t),this.eventSubscribers={preStep:[],postStep:[],step:[],start:[],pause:[]}}generatePlants(){if(0===this.grid.countEmpty())return;const e=this.grid.countEmpty()/this.grid.getSize().getCellCount()/100;for(const{x:t,y:n,cell:r}of this.grid)r.isEmpty()&&Math.random()<e&&this.grid.insert(t,n,this.cellFactory.createPlant())}nextStep(){this.fireEvent("preStep"),this.generatePlants();for(const{x:e,y:t,cell:n}of this.grid)n.isStatic()||n.update(new r.default(this.grid,e,t,this.cellFactory));this.fireEvent("step"),this.step++,this.fireEvent("postStep")}start(){if(this.timeoutId)return;const e=this;this.timeoutId=setTimeout((function t(){e.nextStep(),e.timeoutId=setTimeout(t,e.timeoutDelay)}),this.timeoutDelay),this.fireEvent("start")}pause(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null,this.fireEvent("pause"))}getGrid(){return this.grid}getStep(){return this.step}getCellFactory(){return this.cellFactory}setTimeoutDelay(e){this.timeoutDelay=e}subscribe(e,t){this.eventSubscribers[e].push(t)}fireEvent(e){this.eventSubscribers[e].forEach((e=>e(this)))}}},816:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(829);var a;!function(e){e[e.EMPTY=0]="EMPTY",e[e.WALL=1]="WALL",e[e.PLANT=2]="PLANT",e[e.MEAT=3]="MEAT",e[e.ORGANISM_SIMILAR=4]="ORGANISM_SIMILAR",e[e.ORGANISM_OTHER=5]="ORGANISM_OTHER"}(a||(a={}));const i=()=>{const e=Object.keys(r.OrganismAction).map((e=>Number.parseInt(e))).filter((e=>!Number.isNaN(e)));return e[Math.floor(Math.random()*e.length)]},o=e=>Math.floor(Math.random()*e);class l{constructor(e,t,n={}){this.mutationСhance=e,this.similarityLimit=t,this.reflexes=n}getAction(e,t){const n=e.getEnergy()>50;let i;if(t.visit({visitEmpty:e=>{i=a.EMPTY},visitWall:e=>{i=a.WALL},visitPlant:e=>{i=a.PLANT},visitMeat:e=>{i=a.MEAT},visitOrganism:t=>{i=e.isSimilar(t)?a.ORGANISM_SIMILAR:a.ORGANISM_OTHER}}),n&&i===a.EMPTY)return r.OrganismAction.DIVIDE;const o=this.reflexes[`${i}`];return void 0===o||o===r.OrganismAction.DIVIDE&&!n?r.OrganismAction.NOTHING:o}compare(e){return 0}isSimilar(e){return this.compare(e)>=this.similarityLimit}clone(){let e=this.similarityLimit,t=this.mutationСhance,n={};for(let e of l.generateReflexKeys())n[e]=this.reflexes[e];if(this.mutationСhance>o(100)){const r=o(8);if(0===r)t+=5*(1===o(2)?-1:1);else if(1===r)e+=5*(1===o(2)?-1:1);else if(r>=2){const e=l.generateReflexKeys();n[e[o(e.length)]]=i()}}return new l(t,e,n)}static generateReflexKeys(){const e=Object.values(a).filter((e=>"number"==typeof e)),t=[];for(let n of e)t.push(`${n}`);return t}static createRandom(){let e={};for(let t of l.generateReflexKeys())e[t]=i();return new l(Math.floor(100*Math.random()),Math.floor(100*Math.random()),e)}}t.default=l},189:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t){this.cells=e,this.size=t,this.x=0,this.y=0}next(){const e={cell:this.cells[this.x][this.y],x:this.x,y:this.y};return this.x++,this.x===this.size.getWidth()&&(this.x=0,this.y++),e}hasNext(){return this.y<this.size.getHeight()}}},704:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(904),a=n(189);class i{constructor(e,t){this.size=e,this.cellFactory=t,this.cells={}}*[Symbol.iterator](){const e=new a.default(this.createSnapshot(),this.size);for(;e.hasNext();)yield e.next()}getSize(){return this.size}insert(e,t,n){(0,r.assertLessThan)(e,this.size.getWidth()),(0,r.assertLessThan)(t,this.size.getHeight()),(0,r.assertGreaterOrEqualThan)(e,0),(0,r.assertGreaterOrEqualThan)(t,0),this.cells[`${e}:${t}`]=n}delete(e,t){delete this.cells[`${e}:${t}`]}getCell(e,t){return this.cells[`${e}:${t}`]||this.cellFactory.createEmpty()}countEmpty(){let e=this.size.getCellCount();for(const t in this.cells)this.cells[t].isEmpty()&&e--;return e}createSnapshot(){const e=[];for(let t=0;t<this.size.getWidth();t++){e[t]||(e[t]=[]);for(let n=0;n<this.size.getHeight();n++)e[t][n]=this.getCell(t,n)}return e}}t.default=i},874:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MeatCell=void 0;const r=n(211);class a extends r.Cell{visit(e){e.visitMeat(this)}}t.MeatCell=a},829:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.OrganismAction=void 0,(n=t.OrganismAction||(t.OrganismAction={}))[n.ROTATE_LEFT=0]="ROTATE_LEFT",n[n.ROTATE_RIGHT=1]="ROTATE_RIGHT",n[n.STEP=2]="STEP",n[n.ATTACK=3]="ATTACK",n[n.EAT=4]="EAT",n[n.DIVIDE=5]="DIVIDE",n[n.NOTHING=6]="NOTHING"},815:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OrganismCell=void 0;const r=n(211),a=n(467),i=n(675),o=n(829);class l extends r.Cell{constructor(e,t,n=70){super(),this.color=e,this.genome=t,this.energy=n,this.lifetime=0,this.direction=i.Direction.random()}getLifetime(){return this.lifetime}getEnergy(){return this.energy}getDirection(){return this.direction}getGenome(){return this.genome}visit(e){e.visitOrganism(this)}update(e){if(this.lifetime>100||this.energy<=0)return void e.replace((e=>e.createMeat()));const t=i.Direction.getOffset(this.direction),n=e.getByOffest(...t),r=this.genome.getAction(this,n);if(r===o.OrganismAction.STEP)e.moveByOffest(...t),this.changeEnergy(-1);else if(r===o.OrganismAction.ROTATE_LEFT)this.direction=i.Direction.rotateLeft(this.direction),this.changeEnergy(-1);else if(r===o.OrganismAction.ROTATE_RIGHT)this.direction=i.Direction.rotateLeft(this.direction),this.changeEnergy(-1);else if(r===o.OrganismAction.DIVIDE)n.isEmpty()&&(e.moveByOffest(...t),this.changeEnergy(Math.floor(this.energy/-2)),e.replace((e=>e.createOrganism(this.color,this.genome.clone(),this.energy))));else if(r===o.OrganismAction.ATTACK){const e=this;n.visit(new class extends a.default{visitOrganism(t){t.kill(),e.changeEnergy(-1)}})}else if(r===o.OrganismAction.EAT){const r=n=>{e.deleteByOffset(...t),e.moveByOffest(...t),this.changeEnergy(n)};n.visit(new class extends a.default{visitMeat(e){r(20)}visitPlant(e){r(20)}})}this.lifetime++}changeEnergy(e){this.energy+=e,this.energy>100?this.energy=100:this.energy<0&&(this.energy=0)}kill(){this.energy=0}isStatic(){return!1}isSimilar(e){return this.genome.isSimilar(e.getGenome())}getColor(){return this.color}}t.OrganismCell=l},906:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PlantCell=void 0;const r=n(211);class a extends r.Cell{visit(e){e.visitPlant(this)}}t.PlantCell=a},828:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Size=void 0;const r=n(904);class a{constructor(e,t){this.width=e,this.height=t,(0,r.assertGreaterOrEqualThan)(e,0),(0,r.assertGreaterOrEqualThan)(t,0)}getWidth(){return this.width}setWidth(e){return new a(e,this.height)}getHeight(){return this.height}setHeight(e){return new a(this.width,e)}getRatio(){return this.width/this.height}getCellCount(){return this.width*this.height}}t.Size=a},997:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WallCell=void 0;const r=n(211);class a extends r.Cell{visit(e){e.visitWall(this)}}t.WallCell=a},173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(489),a=n(717),i=n(601);t.default=class{constructor(e,t,n){this.canvas=e,this.game=t,this.context=e.getContext("2d"),this.setRenderStrategy(n)}render(){if(!this.renderStrategy)return;let e,t;const n=this.game.getGrid().getSize().getRatio();let r=[0,0];n>this.canvas.width/this.canvas.height?(e=this.canvas.width,t=this.canvas.width/n,r[1]=(this.canvas.height-t)/2):(e=this.canvas.height*n,t=this.canvas.height,r[0]=(this.canvas.width-e)/2);const a=e/this.game.getGrid().getSize().getWidth();for(const{x:e,y:t,cell:n}of this.game.getGrid()){const i=r[0]+e*a,o=r[1]+t*a;n.visit(this.renderStrategy.createVisitor(i,o,a))}}setRenderStrategy(e){"none"===e?this.renderStrategy=null:"default"===e?this.renderStrategy=new r.default(this.context):"energy"===e?this.renderStrategy=new a.default(this.context):"genesis"===e&&(this.renderStrategy=new i.default(this.context))}}},489:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(675);t.default=class{constructor(e,t){this.context=e,this.styles=t,this.styles=Object.assign({CELL_WALL_COLOR:"#5f5f5f",CELL_ORGANISM_COLOR:"#0B5FA5",CELL_ORGANISM_EYE_COLOR:"#66A1D2",CELL_EMPTY_COLOR:"#000000",CELL_PLANT_COLOR:"#399200",CELL_MEAT_COLOR:"#FE7276"},t)}createVisitor(e,t,n){return{visitEmpty:r=>{this.context.fillStyle=this.styles.CELL_EMPTY_COLOR,this.context.fillRect(e,t,n,n)},visitWall:r=>{this.context.fillStyle=this.styles.CELL_WALL_COLOR,this.context.fillRect(e,t,n,n)},visitPlant:r=>{this.context.fillStyle=this.styles.CELL_PLANT_COLOR,this.context.fillRect(e,t,n,n)},visitMeat:r=>{this.context.fillStyle=this.styles.CELL_MEAT_COLOR,this.context.fillRect(e,t,n,n)},visitOrganism:a=>{this.context.fillStyle=this.styles.CELL_ORGANISM_COLOR,this.context.fillRect(e,t,n,n);const i=n/3;let o;switch(a.getDirection()){case r.Direction.NORTH_WEST:o=[0,0];break;case r.Direction.NORTH:o=[i,0];break;case r.Direction.NORTH_EAST:o=[2*i,0];break;case r.Direction.SOUTH_WEST:o=[0,2*i];break;case r.Direction.SOUTH:o=[i,2*i];break;case r.Direction.SOUTH_EAST:o=[2*i,2*i];break;case r.Direction.WEST:o=[0,i];break;case r.Direction.EAST:o=[2*i,i]}this.context.fillStyle=this.styles.CELL_ORGANISM_EYE_COLOR,this.context.fillRect(e+o[0],t+o[1],i,i)}}}}},717:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(469),a=n(489);class i extends a.default{createVisitor(e,t,n){return{visitEmpty:r=>{this.context.fillStyle=this.styles.CELL_EMPTY_COLOR,this.context.fillRect(e,t,n,n)},visitWall:r=>{this.context.fillStyle=this.styles.CELL_WALL_COLOR,this.context.fillRect(e,t,n,n)},visitPlant:r=>{this.context.fillStyle=this.styles.CELL_EMPTY_COLOR,this.context.fillRect(e,t,n,n)},visitMeat:r=>{this.context.fillStyle=this.styles.CELL_EMPTY_COLOR,this.context.fillRect(e,t,n,n)},visitOrganism:a=>{let i=a.getEnergy();this.context.fillStyle=r.default.fromHex("#ffff00").mix(r.default.fromHex("#ff0000"),i/100).toHexFormat(),this.context.fillRect(e,t,n,n)}}}}t.default=i},601:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(489);class a extends r.default{createVisitor(e,t,n){const r=super.createVisitor(e,t,n);return r.visitOrganism=r=>{this.context.fillStyle=r.getColor().toHexFormat(),this.context.fillRect(e,t,n,n)},r}}t.default=a},378:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(766),a=n(294),i=n(294),o=n(4),l=n(827),u=n(306),s=n(139),c=n(376),f=(0,r.observer)((()=>{const[e]=(0,i.useState)((()=>new c.Store(o.default,{})));return a.createElement(s.StoreContext.Provider,{value:e},a.createElement("div",{className:"layout"},a.createElement(l.GameComponent,null),a.createElement(u.PanelComponent,null)))}));t.default=f},827:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GameComponent=void 0;const r=n(294),a=n(294),i=n(766),o=n(560),l=n(139);t.GameComponent=(0,i.observer)((()=>{const e=(0,a.useRef)(),[t,n,i]=(0,o.useSize)(),u=(0,a.useContext)(l.StoreContext);return(0,a.useEffect)((()=>(u.setCanvas(e.current),()=>{})),[e.current]),(0,a.useEffect)((()=>(u.render(),()=>{})),[t,n]),r.createElement("div",{ref:i,className:"canvas-container"},r.createElement("canvas",{width:t,height:n,ref:e,className:"canvas"}))}))},306:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PanelComponent=void 0;const r=n(766),a=n(294),i=n(294),o=n(139);t.PanelComponent=(0,r.observer)((()=>{const e=(0,i.useContext)(o.StoreContext);return a.createElement("div",{className:"panel"},a.createElement("div",{className:"form-control"},a.createElement("label",{htmlFor:"map_theme"},"Map theme"),a.createElement("select",{value:e.getRenderTheme(),className:"form-input",onChange:t=>e.changeRenderTheme(t.target.value)},a.createElement("option",{value:"default"},"Default"),a.createElement("option",{value:"none"},"None"),a.createElement("option",{value:"genesis"},"Genesis"),a.createElement("option",{value:"energy"},"Energy"))),a.createElement("div",{className:"form-control"},a.createElement("label",null,"Step delay"),a.createElement("input",{type:"range",min:"0",max:"1000",step:"1",value:e.getStepDelay(),onChange:t=>e.changeStepDelay(Number(t.target.value))})),a.createElement("div",null,e.isPaused()&&a.createElement("button",{className:"btn",onClick:()=>e.start()},"Start"),!e.isPaused()&&a.createElement("button",{className:"btn",onClick:()=>e.pause()},"Pause")),a.createElement("div",null,a.createElement("button",{className:"btn",onClick:()=>e.newGame()},"New simulation")))}))},139:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StoreContext=void 0;const r=n(294);t.StoreContext=r.createContext(null)},560:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.useSize=void 0;const r=n(294);t.useSize=function(){const[e,t]=(0,r.useState)(0),[n,a]=(0,r.useState)(0),[i,o]=(0,r.useState)(),l=(0,r.useCallback)((e=>{if(e){t(e.getBoundingClientRect().width),a(e.getBoundingClientRect().height);const n=new ResizeObserver((e=>{for(let n of e){t(n.contentRect.width),a(n.contentRect.height);break}}));n.observe(e),o((()=>()=>n.disconnect()))}}),[]);return(0,r.useEffect)((()=>i),[i]),[e,n,l]}},376:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var a,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(o=(i<3?a(o):i>3?a(t,n,o):a(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o};Object.defineProperty(t,"__esModule",{value:!0}),t.Store=void 0;const a=n(949),i=n(173);class o{constructor(e,t){this.gameFactory=e,this.options=t,this.rendererTheme="default",this.paused=!0,this.stepDelay=50,(0,a.makeObservable)(this),this.newGame(t)}render(){this.renderer&&this.renderer.render()}newGame(e){this.paused=!0,this.game=this.gameFactory(e),this.game.setTimeoutDelay(this.stepDelay),this.newRenderer()}setCanvas(e){this.canvas=e,this.newRenderer()}changeRenderTheme(e){this.rendererTheme=e,this.renderer&&(this.renderer.setRenderStrategy(e),this.renderer.render())}getRenderTheme(){return this.rendererTheme}pause(){this.paused=!0,this.game&&this.game.pause()}start(){this.paused=!1,this.game&&this.game.start()}isPaused(){return this.paused}changeStepDelay(e){this.stepDelay=e,this.game&&this.game.setTimeoutDelay(e)}getStepDelay(){return this.stepDelay}newRenderer(){this.game&&this.canvas&&(this.renderer=new i.default(this.canvas,this.game,this.rendererTheme),this.game.subscribe("step",(e=>this.renderer.render())))}}r([a.observable],o.prototype,"rendererTheme",void 0),r([a.observable],o.prototype,"paused",void 0),r([a.observable],o.prototype,"stepDelay",void 0),r([a.action],o.prototype,"newGame",null),r([a.action],o.prototype,"changeRenderTheme",null),r([a.action],o.prototype,"pause",null),r([a.action],o.prototype,"start",null),r([a.action],o.prototype,"changeStepDelay",null),t.Store=o}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const e=n(294),t=n(745),r=n(378);(0,t.createRoot)(document.getElementById("root")).render(e.createElement(r.default,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,